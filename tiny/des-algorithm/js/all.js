function processProps(e,t){if(t.hasOwnProperty("attrs"))for(let[s,l]of Object.entries(t.attrs))e.setAttribute(s,l);if(t.hasOwnProperty("classes")){let s=t.classes.split(" ");for(let t of s)t.trim().length>0&&e.classList.add(t)}if(t.hasOwnProperty("events"))for(let[s,l]of Object.entries(t.events))e.addEventListener(s,l)}function Tag(e,...t){let s=document.createElement(e);for(let e of t)if(e instanceof Node)s.appendChild(e);else if("string"==typeof e)s.appendChild(document.createTextNode(e));else if(Array.isArray(e))for(let t of e)s.appendChild(t);else"object"==typeof e?processProps(s,e):console.log("ERROR: Unsupported type",e);return s}function Div(...e){return Tag("div",...e)}function H1(...e){return Tag("h1",...e)}function H2(...e){return Tag("h2",...e)}function H3(...e){return Tag("h3",...e)}function H4(...e){return Tag("h4",...e)}function H5(...e){return Tag("h5",...e)}function H6(...e){return Tag("h6",...e)}function WIteration(e,t){return Div({classes:"single-iteration"},Div("iteration # "+(e+1).toString(),{classes:"subtitle"}),Div({classes:"row"},WBlockedBytes("left",t.leftPart,BYTE_STYLE_DATA),Div({classes:"w-pad"}),Div(WBlockedBytes("right",t.rightPart,BYTE_STYLE_DATA),WRepeatChar("↓",4),sampleTable("Expansion table",6,8),WRepeatChar("↓",6),WBlockedBytes("expanded",t.expandedValue,BYTE_STYLE_DATA),WRepeatChar("⊕",6),WBlockedBytes("key #"+(e+1),t.key,BYTE_STYLE_KEY),WRepeatChar("↓",6),WBlockedBytes("xored expaned value",t.xoredExpandedValue,BYTE_STYLE_DATA),WRepeatChar("↓",6),Div("SFunction"),WRepeatChar("↓",4),WBlockedBytes("SFunction result",t.SResult,BYTE_STYLE_DATA),WRepeatChar("↓",4),sampleTable("PTable",4,8),WRepeatChar("↓",4),WBlockedBytes("SFunction result permuted",t.SResultPermuted,BYTE_STYLE_DATA),WBlockedBytes("xor with left",t.SResultPermutedXored,BYTE_STYLE_DATA))))}function WBlockedText(e){let t=[];for(let s of e){let e=Div(s,{classes:"item byte-bg-data"});t.push(e)}return Div({classes:"text-byte-block"},Div({classes:"block"},t))}const BYTE_STYLE_DATA=1,BYTE_STYLE_CONST=2,BYTE_STYLE_INITVECTOR=3,BYTE_STYLE_KEY=4;function getCellStyle(e){let t="byte-bg-general";switch(e){case BYTE_STYLE_DATA:t="byte-bg-data";break;case BYTE_STYLE_CONST:t="byte-bg-static";break;case BYTE_STYLE_INITVECTOR:t="byte-bg-initvector";break;case BYTE_STYLE_KEY:t="byte-bg-key"}return t}function WBlockedBytes(e,t,s){let l=[],i=getCellStyle(s);for(let e of t){let t=e.toString(16);1==t.length&&(t="0"+t);let s=Div(t,{classes:`item s ${i}`});l.push(s)}return Div({classes:"text-byte-block"},Div(e,{classes:"name"}),Div({classes:"block"},l))}function WBlockWidthBytes(e,t,s,l,i){let n=Math.floor(t.length/s),r=[];for(let e=0;e<n;e++){let n=[];for(let l=0;l<s;l++){let i=t[e*s+l].toString(10);1==i.length&&(i="0"+i);let r=Div(i,{classes:"item s byte-bg-static"});n.push(r)}r.push(Div({classes:"row"},n,Div({classes:"w-pad"}),Div("→"),Div({classes:"w-pad"}),WBlockedBytes("",[l[e]],i)))}return Div({classes:"text-byte-block"},Div(e,{classes:"name"}),Div(r))}function WBlockTable(e,t,s,l){let i=Math.floor(t.length/s),n=[],r=getCellStyle(l);for(let e=0;e<i;e++){let l=[];for(let i=0;i<s;i++){let n=t[e*s+i].toString(10);1==n.length&&(n="0"+n);let a=Div(n,{classes:`item s ${r}`});l.push(a)}n.push(Div({classes:"row"},l,Div({classes:"w-pad"})))}return Div({classes:"text-byte-block"},Div(e,{classes:"name"}),Div({classes:"sbox-block"},n))}function WRepeatChar(e,t){let s=[];for(let l=0;l<t;l++)s.push(Div(e,{classes:"item"}));return Div({classes:"char-block"},s)}function sampleTable(e,t,s){let l=[];for(let e=0;e<s;e++){let e=[];for(let s=0;s<t;s++){let t=Div({classes:"cell"});e.push(t)}l.push(Div({classes:"row"},e))}return Div({classes:"sample-table text-byte-block"},Div(e,{classes:"name"}),l)}function generalPage(e){let t=new Uint8Array(8*e.blocks.length);for(let s=0;s<e.blocks.length;s++)t.set(e.blocks[s].inputBytes,8*s);let s=[];for(let t=0;t<e.blocks.length;t++){let l=e.blocks[t],i=[];for(let e=0;e<l.iterations.length;e++){let t=WIteration(e,l.iterations[e]);i.push(t)}let n=Div({classes:"action-cols"},Div(`Block ${t+1}`,{classes:"title"}),Div({classes:"single-action-block"},WBlockedBytes("input bytes",l.inputBytes,BYTE_STYLE_DATA),WRepeatChar("⊕",8),WBlockedBytes("Initialization Vector",l.initVector,BYTE_STYLE_INITVECTOR),WRepeatChar("↓",8),WBlockedBytes("xor result",l.xoredInput,BYTE_STYLE_DATA)),Div({classes:"single-action-block"},WRepeatChar("↓",8),sampleTable("Initial permutaion table",8,8),WRepeatChar("↓",8),WBlockedBytes("initial permute",l.permutedXoredInput,BYTE_STYLE_DATA)),Div("Split",{attrs:{style:"text-align: center;"}}),Div({classes:"row",attrs:{style:"justify-content: space-around"}},Div("↓"),Div("↓")),Div(i),Div({classes:"single-action-block"},Div({classes:"row"},WBlockedBytes("final left",l.finalLeft,BYTE_STYLE_DATA),Div({classes:"w-pad"}),WBlockedBytes("final right",l.finalRight,BYTE_STYLE_DATA))),Div({classes:"single-action-block"},WRepeatChar("↓",8),WBlockedBytes("right + left",l.preOutputBlock,BYTE_STYLE_DATA),WRepeatChar("↓",8),sampleTable("Inverse initial permutation table",8,8),WRepeatChar("↓",8),WBlockedBytes("Final result",l.result,BYTE_STYLE_DATA)));s.push(n)}return Div(H3("Input",{classes:"block-title"}),Div({classes:"allow-x-scoll"},WBlockedText(e.inputText),WBlockedBytes("input bytes",t,BYTE_STYLE_DATA)),H3("Output/Result",{classes:"block-title"}),Div({classes:"allow-x-scoll"},WBlockedBytes("Output",e.result,BYTE_STYLE_DATA)),Div({classes:"row block-spaced"},H3("Process",{classes:"block-title"}),Div("Toggle height",{events:{click:function(){document.querySelector(".action-cols-container").classList.toggle("compress")}}},{classes:"compress-height-toggle"})),Div({classes:"action-cols-container"},s))}function keysPage(e){let t=e.keyCalculationLog,s=[];for(let e=0;e<t.steps.length;e++){let l=e+1,i=t.steps[e],n=i.bits.length/2,r=(i.bits.slice(0,n),i.bits.slice(n),Div({classes:"key-gen-block"},Div(Div({classes:"title"},"Key #"+l+" generation"),WBlockedBytes("start data",i.blockStart,BYTE_STYLE_KEY),WRepeatChar("↓",7),Div("Shift each half << "+i.shiftAmount,{classes:"small"}),WRepeatChar("↓",7),WBlockedBytes("Shifted << "+i.shiftAmount,i.blockShifted,BYTE_STYLE_KEY),WRepeatChar("↓",7),sampleTable("Initial permutaion",7,8),WRepeatChar("↓",6),WBlockedBytes("Generated key #"+l,i.result,BYTE_STYLE_KEY))));s.push(r),e<t.steps.length-1&&s.push(Div({classes:"key-connector"}))}return Div(H2("Key generation process"),WBlockedBytes("User provided key",t.start,BYTE_STYLE_KEY),WRepeatChar("↓",8),sampleTable("Initial permutaion: PC1",8,8),WRepeatChar("↓",7),WBlockedBytes("Permuted",t.initialPermutation,BYTE_STYLE_KEY),Div("Steps"),Div({classes:"row"},s))}function WBytesAsBits(e){let t=[],s=1;function l(e){let t=toBits([e]),l=[];for(let e of t)l.push(Div({classes:"item"},Div(s.toString(),{classes:"index"}),Div(e,{classes:"bit"}))),s+=1;return Div({classes:"bytes-bits"},l)}for(let s of e){toBits([s]);t.push(l(s))}return Div({classes:"row bits-row"},t)}function WSboxBits(e,t){let s=[],l=1;function i(e,s){let i=[];for(let e=0;e<s.length;e++){let t=s[e],n="bit sbox-x-bg";0!=e&&5!=e||(n="bit sbox-y-bg"),i.push(Div({classes:"item"},Div(l.toString(),{classes:"index"}),Div(t,{classes:n}))),l+=1}let n=t[e];return Div({classes:"sbox-bits"},i,Div("↓↓↓↓↓↓"),Div({classes:"sbox-calc-part"},Div(`Sbox${e+1}`,{classes:"title"}),Div({classes:"row"},Div(`x: ${n.x}`,{classes:"sbox-x-bg"}),Div(", "),Div(`y: ${n.y}`,{classes:"sbox-y-bg"})),Div("="),Div(`${n.value.toString(16)}`,{classes:"result-half-byte"})))}console.log(t);let n=toBits(e),r=Math.floor(n.length/6);for(let e=0;e<r;e++){let t=n.slice(6*e,6*e+6);s.push(i(e,t))}return Div({classes:"row"},s)}function permutationsPage(e){let t=e.blocks[0],s=e.blocks[0].iterations[0],l=e.keyCalculationLog,i=l.steps[0];return Div(H3("Permutations",{classes:"block-title"}),Div({classes:"row"},Div(H4("Initial Permutation of a block",{classes:"subtitle"}),{classes:"single-permutation-block"},WBlockedBytes("Block[0] xored input",t.xoredInput,BYTE_STYLE_DATA),Div(WBytesAsBits(t.xoredInput)),WRepeatChar("↓",8),WBlockWidthBytes("Initial Permutation table",initialPermutationTable,8,t.permutedXoredInput,BYTE_STYLE_DATA),WRepeatChar("↓",8),Div(WBytesAsBits(t.permutedXoredInput)),WBlockedBytes("Result",t.permutedXoredInput,BYTE_STYLE_DATA)),Div(H4("PC1",{classes:"subtitle"}),{classes:"single-permutation-block"},WBlockedBytes("User provided key bytes",l.start,BYTE_STYLE_KEY),Div(WBytesAsBits(l.start)),WRepeatChar("↓",8),WBlockWidthBytes("PC1 Permutation table",PC1,8,l.initialPermutation,BYTE_STYLE_KEY),WRepeatChar("↓",7),Div(WBytesAsBits(l.initialPermutation)),WBlockedBytes("Result",l.initialPermutation,BYTE_STYLE_KEY)),Div(H4("PC2",{classes:"subtitle"}),{classes:"single-permutation-block"},WBlockedBytes("Shifted value in step 1",i.blockShifted,BYTE_STYLE_KEY),Div(WBytesAsBits(i.blockShifted)),WRepeatChar("↓",8),WBlockWidthBytes("PC2 Permutation table",PC2,8,i.result,BYTE_STYLE_KEY),WRepeatChar("↓",6),Div(WBytesAsBits(i.result)),WBlockedBytes("Result",i.result,BYTE_STYLE_KEY)),Div(H4("Expansion table",{classes:"subtitle"}),{classes:"single-permutation-block"},WBlockedBytes("Right part in step 1",s.rightPart,BYTE_STYLE_DATA),Div(WBytesAsBits(s.rightPart)),WRepeatChar("↓",8),WBlockWidthBytes("Expansion Table",expansionTable,8,s.expandedValue,BYTE_STYLE_DATA),WRepeatChar("↓",6),Div(WBytesAsBits(s.expandedValue)),WBlockedBytes("Result",s.expandedValue,BYTE_STYLE_DATA)),Div(H4("Final Reverse of Initial Permutation",{classes:"subtitle"}),{classes:"single-permutation-block"},WBlockedBytes("Block[0] pre output block",t.preOutputBlock,BYTE_STYLE_DATA),Div(WBytesAsBits(t.preOutputBlock)),WRepeatChar("↓",8),WBlockWidthBytes("Reverse Initial Permutation table",inverseInitialPermutaionTable,8,t.result,BYTE_STYLE_DATA),WRepeatChar("↓",8),Div(WBytesAsBits(t.result)),WBlockedBytes("Result",t.result,BYTE_STYLE_DATA))))}function sFunctionPage(e){let t=e.sboxLog,s=[];for(let e=0;e<SBoxes.length;e++){let t=SBoxes[e];s.push(WBlockTable("SBox #"+(e+1),t,16)),s.push(Div({classes:"h-pad"}))}let l=[];for(let e=0;e<t.steps.length;e++){let s=t.steps[e],i=Div(Div(`${s.x}, ${s.y}, (${s.offset}) ${s.value.toString(16)}`));l.push(i)}return Div(H4("SFunction"),WBlockedBytes("start value",e.sboxLog.start,BYTE_STYLE_DATA),WSboxBits(e.sboxLog.start,t.steps),WRepeatChar("↓",4),WBlockedBytes("result",e.sboxLog.result,BYTE_STYLE_DATA),Div({attrs:{style:"margin-top: 40px;"}},H3("Static SBox tables"),Div({classes:"row"},s)))}function checkError(e){let t=!1,s="---",l=document.querySelector("#input");document.querySelector("#input-key"),document.querySelector("#initialization-vector");return 0==l.value.length?(t=!0,s=Div("Please enter some input to proceed."),[t,s]):8!=e.userKeyBytes.length?(t=!0,s=Div(`Please provide 8 byte key as a hex string. You provided ${e.userKeyBytes.length} byte key`),[t,s]):[t,s]}function display(e){let t=window.location.hash.slice(1),s=document.createElement("div");const[l,i]=checkError(e);let n=document.querySelector("#calc-output");if(n.innerHTML="",l)s=Div({classes:"general-error-block"},i);else{let l=document.querySelectorAll(".menu .item");for(let e of l){let s="",l=e.href.split("#");l.length>1&&(s=l[1]),s==t?e.classList.add("active"):e.classList.remove("active")}switch(t){case"":case"general":s=generalPage(e);break;case"keys":s=keysPage(e);break;case"permutations":s=permutationsPage(e);break;case"sfunction":s=sFunctionPage(e)}}n.appendChild(s)}const BIT_COUNT_IN_BYTE=8,PC1=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],PC2=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],initialPermutationTable=[58,50,42,34,26,18,10,2,60,52,44,36,28,20,12,4,62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8,57,49,41,33,25,17,9,1,59,51,43,35,27,19,11,3,61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7],inverseInitialPermutaionTable=[40,8,48,16,56,24,64,32,39,7,47,15,55,23,63,31,38,6,46,14,54,22,62,30,37,5,45,13,53,21,61,29,36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,34,2,42,10,50,18,58,26,33,1,41,9,49,17,57,25],expansionTable=[32,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,16,17,18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32,1],SBoxes=[[14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7,0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8,4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0,15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13],[15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10,3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5,0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15,13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9],[10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8,13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1,13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7,1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12],[7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15,13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9,10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4,3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14],[2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9,14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6,4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14,11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3],[12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11,10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8,9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6,4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13],[4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1,13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6,1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2,6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12],[13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7,1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2,7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8,2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11]],PTable=[16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25];function getBit(e,t){let s=Math.floor(t/BIT_COUNT_IN_BYTE),l=128>>t%BIT_COUNT_IN_BYTE;return 1==(0!=(e[s]&l))?1:0}function setBit(e,t){let s=Math.floor(t/BIT_COUNT_IN_BYTE),l=128>>t%BIT_COUNT_IN_BYTE;return e[s]=e[s]|l,e}function shiftLeftHalvesOf56Bit(e){let t=(128&e[0])>>3;e[0]=e[0]<<1|(128&e[1])>>7,e[1]=e[1]<<1|(128&e[2])>>7,e[2]=e[2]<<1|(128&e[3])>>7;let s=(240&e[3])<<1|t;t=(8&e[3])>>3;let l=e[3]<<1&15|(128&e[4])>>7;e[3]=s|l,e[4]=e[4]<<1|(128&e[5])>>7,e[5]=e[5]<<1|(128&e[6])>>7,e[6]=e[6]<<1|t}function permute(e,t){let s=new Uint8Array(t.length/BIT_COUNT_IN_BYTE);for(let l=0;l<t.length;l++){1==getBit(e,t[l]-1)&&setBit(s,l)}return s}function dumpBits(e){result="";for(let t=0;t<e.length*BIT_COUNT_IN_BYTE;t++)result+=getBit(e,t),(t+1)%8==0&&(result+=".");console.log(result)}function toBits(e){result="";for(let t=0;t<e.length*BIT_COUNT_IN_BYTE;t++)result+=getBit(e,t);return result}function getBytesFromHexString(e){e.length>2&&"0"==e[0]&&"x"==e[1]&&(e=e.slice(2));let t=Math.floor(e.length/2);0==t&&(t=1);let s=new Uint8Array(t);for(let t=0;t<e.length;t+=2){let l=parseInt(e[t],16)<<4|parseInt(e[t],16);s[t/2]=l}return s}function getBytesFromString(e){return bytes=(new TextEncoder).encode(e),bytes}function xorBlock(e,t){let s=e.slice(),l=e.length>t.length?e.length:t.length;for(let i=0;i<l;i++)s[i]=e[i]^t[i];return s}function generateKeys(e,t){let s=[];t.length>2&&"0"==t[0]&&"x"==t[1]&&(t=t.slice(2)),t.length%2!=0&&(t="0"+t);let l=getBytesFromHexString(t);e.userKeyBytes=l;let i=permute(l,PC1);e.keyCalculationLog.start=l,e.keyCalculationLog.initialPermutation=i,e.keyCalculationLog.steps=[];for(let t=0;t<16;t++){let l=t+1,n={blockStart:new Uint8Array(i)};1==l||2==l||9==l||16==l?(shiftLeftHalvesOf56Bit(i),n.shiftAmount=1):(shiftLeftHalvesOf56Bit(i),shiftLeftHalvesOf56Bit(i),n.shiftAmount=2),n.blockShifted=new Uint8Array(i),n.bits=toBits(i);let r=permute(i,PC2);s.push(r),n.result=r,e.keyCalculationLog.steps.push(n)}return s}function expand32to48bits(e,t){let s=new Uint8Array(6);for(let l=0;l<t.length;l++){getBit(e,t[l]-1)&&setBit(s,l)}return s}function SFunction(e,t,s){let l=e.sboxLog;s&&(l.start=t,l.steps=[]);let i=new Uint8Array(4);for(let e=0;e<8;e++){let n=getBit(t,6*e)<<1|getBit(t,6*e+5),r=getBit(t,6*e+1)<<3|getBit(t,6*e+2)<<2|getBit(t,6*e+3)<<1|getBit(t,6*e+4)<<0,a=n*16+r,o=SBoxes[e][a];if(s){let e={value:o};l.steps.push(e)}let c=Math.floor(e/2);if(e%2==0&&(o<<=4),i[c]=i[c]|o,s){let t=l.steps[e];t.y=n,t.x=r,t.offset=a}}return s&&(l.result=i),i}class State{constructor(){this.inputText="",this.inputIV=new Uint8Array,this.inputKey=new Uint8Array,this.keys=[],this.userKeyBytes=new Uint8Array,this.isCBC=!0,this.keyCalculationLog={},this.sboxLog={},this.blocks=[],this.result=new Uint8Array}}class BlockProcess{constructor(){this.inputBytes=new Uint8Array,this.inputVector=new Uint8Array,this.xoredInput=new Uint8Array,this.permutedXoredInput=new Uint8Array,this.startLeftPart=new Uint8Array,this.startRightPart=new Uint8Array,this.iterations=[],this.preOutputBlock=new Uint8Array,this.finalLeft=new Uint8Array,this.finalRight=new Uint8Array,this.result=new Uint8Array}}class ChangeIteration{constructor(){this.key=new Uint8Array,this.leftPart=new Uint8Array,this.rightPart=new Uint8Array,this.expandedValue=new Uint8Array,this.xoredExpandedValue=new Uint8Array,this.SResult=new Uint8Array,this.SResultPermuted=new Uint8Array,this.SResultPermutedXored=new Uint8Array}}function padInput(e){let t=getBytesFromString(e.inputText);if(t.length%8!=0){let s=8-t.length%8;e.inputText+="\0".repeat(s)}}function DESAlgorithm(e,t,s){let l=new BlockProcess;l.inputBytes=t,l.initVector=s,l.xoredInput=xorBlock(l.inputBytes,l.initVector),l.permutedXoredInput=permute(l.xoredInput,initialPermutationTable);let i=l.permutedXoredInput.slice(0,4),n=l.permutedXoredInput.slice(4,8);l.startLeftPart=i,l.startRightPart=n;for(let t=0;t<e.keys.length;t++){let s=0==Object.keys(e.sboxLog).length,r=new ChangeIteration;r.leftPart=i,r.rightPart=n,r.key=e.keys[t],r.expandedValue=expand32to48bits(n,expansionTable),r.xoredExpandedValue=xorBlock(r.expandedValue,r.key),r.SResult=SFunction(e,r.xoredExpandedValue,s),r.SResultPermuted=permute(r.SResult,PTable),r.SResultPermutedXored=xorBlock(r.SResultPermuted,i),i=n,n=r.SResultPermutedXored,l.iterations.push(r)}return l.preOutputBlock=[...n,...i],l.finalLeft=i,l.finalRight=n,l.result=permute(l.preOutputBlock,inverseInitialPermutaionTable),l}function DESAction(e){e.keys=generateKeys(e,e.inputKey),padInput(e),allInputBytes=getBytesFromString(e.inputText);let t=new Uint8Array(8);e.isCBC&&(t=getBytesFromHexString(e.inputIV));let s=Math.floor(allInputBytes.length/8);for(let l=0;l<s;l++){let s=DESAlgorithm(e,allInputBytes.slice(8*l,8*l+8),t);e.isCBC&&(t=s.result),e.blocks.push(s)}let l=new Uint8Array(8*e.blocks.length);for(let t=0;t<e.blocks.length;t++)l.set(e.blocks[t].result,8*t);return e.result=l,e.result}function bytesToHex(e){let t="0x";for(let s of e){s.toString(16).length<2&&(t+="0"),t+=s.toString(16)}return 2==t.length&&(t+="0"),t}function update(e){let t=document.querySelector("#input"),s=document.querySelector("#input-key"),l=document.querySelector("#initialization-vector"),i="CBC"==e,n=new State;n.inputText=t.value,n.inputIV=l.value,n.inputKey=s.value,n.isCBC=i;DESAction(n);display(n)}addEventListener("DOMContentLoaded",(function(){let e=document.querySelector("#input"),t=document.querySelector("#input-key"),s=document.querySelector("#initialization-vector"),l="ECB";var i=document.getElementsByName("enc-type");for(let e of i)e.checked&&(l=e.value),e.addEventListener("input",(function(){l=this.value,update(l)}));let n=[e,t,s];for(let e of n)e.addEventListener("keyup",(function(){update(l)}));window.addEventListener("hashchange",(function(){update(l)})),update(l)}));
