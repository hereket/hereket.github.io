Display *XOpenDisplay(char *display_name);
unsigned long XAllPlanes(void);
BlackPixel(display, screen_number);
unsigned long XBlackPixel(Display *display, int screen_number);
WhitePixel(display, screen_number);
unsigned long XWhitePixel(Display *display, int screen_number);
ConnectionNumber(display);
int XConnectionNumber(Display *display);
DefaultColormap(display, screen_number);
Colormap XDefaultColormap(Display *display, int screen_number);
DefaultDepth(display, screen_number);
int XDefaultDepth(Display *display, int screen_number);
int *XListDepths(Display *display, int screen_number, int *count_return);
DefaultGC(display, screen_number);
GC XDefaultGC(Display *display, int screen_number);
DefaultRootWindow(display);
Window XDefaultRootWindow(Display *display);
DefaultScreenOfDisplay(display);
Screen *XDefaultScreenOfDisplay(Display *display);
ScreenOfDisplay(display, screen_number);
Screen *XScreenOfDisplay(Display *display, int screen_number);
DefaultScreen(display);
int XDefaultScreen(Display *display);
DefaultVisual(display, screen_number);
Visual *XDefaultVisual(Display *display, int screen_number);
DisplayCells(display, screen_number);
int XDisplayCells(Display *display, int screen_number);
DisplayPlanes(display, screen_number);
int XDisplayPlanes(Display *display, int screen_number);
DisplayString(display);
char *XDisplayString(Display *display);
long XExtendedMaxRequestSize(Display *display);
long XMaxRequestSize(Display *display);
LastKnownRequestProcessed(display);
unsigned long XLastKnownRequestProcessed(Display *display);
NextRequest(display);
unsigned long XNextRequest(Display *display);
ProtocolVersion(display);
int XProtocolVersion(Display *display);
ProtocolRevision(display);
int XProtocolRevision(Display *display);
QLength(display);
int XQLength(Display *display);
RootWindow(display, screen_number);
Window XRootWindow(Display *display, int screen_number);
ScreenCount(display);
int XScreenCount(Display *display);
ServerVendor(display);
char *XServerVendor(Display *display);
VendorRelease(display);
int XVendorRelease(Display *display);
XPixmapFormatValues *XListPixmapFormats(Display *display, int *count_return);
ImageByteOrder(display);
int XImageByteOrder(Display *display);
XBitmapUnit(display);
int XBitmapUnit(Display *display);
BitmapBitOrder(display);
int XBitmapBitOrder(Display *display);
BitmapPad(display);
int XBitmapPad(Display *display);
DisplayHeight(display, screen_number);
int XDisplayHeight(Display *display, int screen_number);
DisplayHeightMM(display, screen_number);
int XDisplayHeightMM(Display *display, int screen_number);
DisplayWidth(display, screen_number);
int XDisplayWidth(Display *display, int screen_number);
DisplayWidthMM(display, screen_number);
int XDisplayWidthMM(Display *display, int screen_number);
BlackPixelOfScreen(screen);
unsigned long XBlackPixelOfScreen(Screen *screen);
XWhitePixelOfScreen(screen);
unsigned long XWhitePixelOfScreen(Screen *screen);
CellsOfScreen(screen);
int XCellsOfScreen(Screen *screen);
DefaultColormapOfScreen(screen);
Colormap XDefaultColormapOfScreen(Screen *screen);
DefaultDepthOfScreen(screen);
int XDefaultDepthOfScreen(Screen *screen);
DefaultGCOfScreen(screen);
GC XDefaultGCOfScreen(Screen *screen);
XDefaultVisualOfScreen(screen);
Visual *XDefaultVisualOfScreen(Screen *screen);
DoesBackingStore(screen);
int XDoesBackingStore(Screen *screen);
DoesSaveUnders(screen);
Bool XDoesSaveUnders(Screen *screen);
DisplayOfScreen(screen);
Display *XDisplayOfScreen(Screen *screen);
ScreenNumberOfScreen(screen);
long XScreenNumberOfScreen(Screen *screen);
EventMaskOfScreen(screen);
long XEventMaskOfScreen(Screen *screen);
WidthOfScreen(screen);
int XWidthOfScreen(Screen *screen);
HeightOfScreen(screen);
int XHeightOfScreen(Screen *screen);
WidthMMOfScreen(screen);
int XWidthMMOfScreen(Screen *screen);
HeightMMOfScreen(screen);
int XHeightMMOfScreen(Screen *screen);
MaxCmapsOfScreen(screen);
int XMaxCmapsOfScreen(Screen *screen);
MinCmapsOfScreen(screen);
int XMinCmapsOfScreen(Screen *screen);
PlanesOfScreen(screen);
int XPlanesOfScreen(Screen *screen);
RootWindowOfScreen(screen);
Window XRootWindowOfScreen(Screen *screen);
XNoOp(Display *display);
XFree(void *data);
XCloseDisplay(Display *display);
XSetCloseDownMode(Display *display, int close_mode);
Status XInitThreads(void);
XLockDisplay(Display *display);
XUnlockDisplay(Display *display);
typedef void (*XConnectionWatchProc)(Display *display, XPointer client_data, int fd, Bool opening, XPointer *watch_data);
Status XAddConnectionWatch(Display *display, XConnectionWatchProc procedure, XPointer client_data);
Status XRemoveConnectionWatch(Display *display, XConnectionWatchProc procedure, XPointer client_data);
void XProcessInternalConnection(Display *display, int fd);
Status XInternalConnectionNumbers(Display *display, int ** fd, int * count_return);
VisualID XVisualIDFromVisual(Visual *visual);
Window XCreateWindow(Display *display, Window parent, int x, int y, unsigned int width, unsigned int height, unsigned int border_width, int depth, unsigned int class, Visual *visual, unsigned long valuemask, XSetWindowAttributes *attributes);
Window XCreateSimpleWindow(Display *display, Window parent, int x, int y, unsigned int width, unsigned int height, unsigned int border_width, unsigned long border, unsigned long background);
XDestroyWindow(Display *display, Window w);
XDestroySubwindows(Display *display, Window w);
XMapWindow(Display *display, Window w);
XMapRaised(Display *display, Window w);
XMapSubwindows(Display *display, Window w);
XUnmapWindow(Display *display, Window w);
XUnmapSubwindows(Display *display, Window w);
XConfigureWindow(Display *display, Window w, unsigned int value_mask, XWindowChanges *values);
XMoveWindow(Display *display, Window w, int x, int y);
XResizeWindow(Display *display, Window w, unsigned int width, unsigned int height);
XMoveResizeWindow(Display *display, Window w, int x, int y, unsigned int width, unsigned int height);
XSetWindowBorderWidth(Display *display, Window w, unsigned int width);
XRaiseWindow(Display *display, Window w);
XLowerWindow(Display *display, Window w);
XCirculateSubwindows(Display *display, Window w, int direction);
XCirculateSubwindowsUp(Display *display, Window w);
XCirculateSubwindowsDown(Display *display, Window w);
XRestackWindows(Display *display, Window windows[], int nwindows);
XChangeWindowAttributes(Display *display, Window w, unsigned long valuemask, XSetWindowAttributes *attributes);
XSetWindowBackground(Display *display, Window w, unsigned long background_pixel);
XSetWindowBackgroundPixmap(Display *display, Window w, Pixmap background_pixmap);
XSetWindowBorder(Display *display, Window w, unsigned long border_pixel);
XSetWindowBorderPixmap(Display *display, Window w, Pixmap border_pixmap);
XSetWindowColormap(Display *display, Window w, Colormap colormap);
XDefineCursor(Display *display, Window w, Cursor cursor);
XUndefineCursor(Display *display, Window w);
Status XQueryTree(Display *display, Window w, Window *root_return, Window *parent_return, Window **children_return, unsigned int *nchildren_return);
Status XGetWindowAttributes(Display *display, Window w, XWindowAttributes *window_attributes_return);
Status XGetGeometry(Display *display, Drawable d, Window *root_return, int *x_return, int *y_return, unsigned int *width_return, unsigned int *height_return, unsigned int *border_width_return, unsigned int *depth_return);
Bool XTranslateCoordinates(Display *display, Window src_w, Window dest_w, int src_x, int src_y, int *dest_x_return, int *dest_y_return, Window *child_return);
Bool XQueryPointer(Display *display, Window w, Window *root_return, Window *child_return, int *root_x_return, int *root_y_return, int *win_x_return, int *win_y_return, unsigned int *mask_return);
Atom XInternAtom(Display *display, char *atom_name, Bool only_if_exists);
Status XInternAtoms(Display *display, char **names, int count, Bool only_if_exists, Atom *atoms_return);
char *XGetAtomName(Display *display, Atom atom);
Status XGetAtomNames(Display *display, Atom *atoms, int count, char **names_return);
int XGetWindowProperty(Display *display, Window  w, Atom property, long long_offset, long long_length, Bool delete, Atom req_type, Atom *actual_type_return, int *actual_format_return, unsigned long *nitems_return, unsigned long *bytes_after_return, unsigned char **prop_return);
Atom *XListProperties(Display *display, Window w, int *num_prop_return);
XChangeProperty(Display *display, Window w, Atom property, Atom type, int format, int mode, unsignedchar *data, int nelements);
XRotateWindowProperties(Display *display, Window w, Atom properties[], int num_prop, int npositions);
XDeleteProperty(Display *display, Window w, Atom property);
XSetSelectionOwner(Display *display, Atom selection, Window owner, Time time);
Window XGetSelectionOwner(Display *display, Atom selection);
XConvertSelection(Display *display, Atom selection, Atom target, Atom property, Window requestor, Time time);
Pixmap XCreatePixmap(Display *display, Drawable d, unsigned int width, unsigned int height, unsigned int depth);
XFreePixmap(Display *display, Pixmap pixmap);
Cursor XCreateFontCursor(Display *display, unsigned int shape);
Cursor XCreateGlyphCursor(Display *display, Font source_font, Font mask_font, unsigned int source_char, unsigned int mask_char, XColor *foreground_color, XColor *background_color);
Cursor XCreatePixmapCursor(Display *display, Pixmap source, Pixmap mask, XColor *foreground_color, XColor *background_color, unsigned int x, unsigned int y);
Status XQueryBestCursor(Display *display, Drawable d, unsigned int width, unsigned int height, unsigned int *width_return, unsigned int *height_return);
XRecolorCursor(Display *display, Cursor cursor, XColor *foreground_color, XColor *background_color);
XFreeCursor(Display *display, Cursor cursor);
Colormap XCreateColormap(Display *display, Window w, Visual *visual, int alloc);
Colormap XCopyColormapAndFree(Display *display, Colormap colormap);
XFreeColormap(Display *display, Colormap colormap);
Status XLookupColor(Display *display, Colormap colormap, char *color_name, XColor *exact_def_return, XColor *screen_def_return);
Status XParseColor(Display *display, Colormap colormap, char *spec, XColor *exact_def_return);
Status XcmsLookupColor(Display *display, Colormap colormap, char *color_string, XcmsColor *color_exact_return, XcmsColor *color_screen_return, XcmsColorFormat result_format);
Status XAllocColor(Display *display, Colormap colormap, XColor *screen_in_out);
Status XcmsAllocColor(Display *display, Colormap colormap, XcmsColor *color_in_out, XcmsColorFormat result_format);
Status XAllocNamedColor(Display *display, Colormap colormap, char *color_name, XColor *screen_def_return, XColor *exact_def_return);
Status XcmsAllocNamedColor(Display *display, Colormap colormap, char *color_string, XcmsColor *color_screen_return, XcmsColor *color_exact_return, XcmsColorFormat result_format);
Status XAllocColorCells(Display *display, Colormap colormap, Bool contig, unsigned long plane_masks_return[], unsigned int nplanes, unsigned long pixels_return[], unsigned int npixels);
Status XAllocColorPlanes(Display *display, Colormap colormap, Bool contig, unsigned long pixels_return[], int ncolors, int nreds, int ngreens, int nblues, unsigned long *rmask_return, unsigned long *gmask_return, unsigned long *bmask_return);
XFreeColors(Display *display, Colormap colormap, unsigned long pixels[], int npixels, unsigned long planes);
XStoreColor(Display *display, Colormap colormap, XColor *color);
XStoreColors(Display *display, Colormap colormap, XColor color[], int ncolors);
Status XcmsStoreColor(Display *display, Colormap colormap, XcmsColor *color);
Status XcmsStoreColors(Display *display, Colormap colormap, XcmsColor colors[], int ncolors, Bool compression_flags_return[]);
XStoreNamedColor(Display *display, Colormap colormap, char *color, unsigned long pixel, int flags);
XQueryColor(Display *display, Colormap colormap, XColor *def_in_out);
XQueryColors(Display *display, Colormap colormap, XColor defs_in_out[], int ncolors);
Status XcmsQueryColor(Display *display, Colormap colormap, XcmsColor *color_in_out, XcmsColorFormat result_format);
Status XcmsQueryColors(Display *display, Colormap colormap, XcmsColor colors_in_out[], unsigned int ncolors, XcmsColorFormat result_format);
XcmsCCC XcmsCCCOfColormap(Display *display, Colormap colormap);
XcmsCCC XcmsSetCCCOfColormap(Display *display, Colormap colormap, XcmsCCC ccc);
XcmsCCC XcmsDefaultCCC(Display *display, int screen_number);
DisplayOfCCC(XcmsCCC ccc);
Display *XcmsDisplayOfCCC(XcmsCCC ccc);
VisualOfCCC(XcmsCCC ccc);
Visual *XcmsVisualOfCCC(XcmsCCC ccc);
ScreenNumberOfCCC(XcmsCCC ccc);
int XcmsScreenNumberOfCCC(XcmsCCC ccc);
ScreenWhitePointOfCCC(XcmsCCC ccc);
XcmsColor XcmsScreenWhitePointOfCCC(XcmsCCC ccc);
 ClientWhitePointOfCCC(XcmsCCC ccc);
XcmsColor *XcmsClientWhitePointOfCCC(XcmsCCC ccc);
Status XcmsSetWhitePoint(XcmsCCC ccc, XcmsColor *color);
XcmsCompressionProc XcmsSetCompressionProc(XcmsCCC ccc, XcmsCompressionProc compression_proc, XPointer client_data);
XcmsWhiteAdjustProc XcmsSetWhiteAdjustProc(XcmsCCC ccc, XcmsWhiteAdjustProc white_adjust_proc, XPointer client_data);
XcmsCCC XcmsCreateCCC(Display *display, int screen_number, Visual *visual, XcmsColor *client_white_point, XcmsCompressionProc compression_proc, XPointer compression_client_data, XcmsWhiteAdjustProc white_adjust_proc, XPointer white_adjust_client_data);
void XcmsFreeCCC(XcmsCCC ccc);
Status XcmsConvertColors(XcmsCCC ccc, XcmsColor colors_in_out[], unsigned int ncolors, XcmsColorFormat target_format, Bool compression_flags_return[]);
typedef Status(*XcmsCompressionProc)(XcmsCCC ccc, XcmsColor colors_in_out[], unsigned int ncolors, unsigned int index, Bool compression_flags_return[]);
typedef Status (*XcmsWhiteAdjustProc)(XcmsCCC ccc, XcmsColor *initial_white_point, XcmsColor *target_white_point, XcmsColorFormat target_format, XcmsColor colors_in_out[], unsigned int ncolors, Bool compression_flags_return[]);
Status XcmsQueryBlack(XcmsCCC ccc, XcmsColorFormat target_format, XcmsColor *color_return);
Status XcmsQueryBlue(XcmsCCC ccc, XcmsColorFormat target_format, XcmsColor *color_return);
Status XcmsQueryGreen(XcmsCCC ccc, XcmsColorFormat target_format, XcmsColor *color_return);
Status XcmsQueryRed(XcmsCCC ccc, XcmsColorFormat target_format, XcmsColor *color_return);
Status XcmsQueryWhite(XcmsCCC ccc, XcmsColorFormat target_format, XcmsColor *color_return);
Status XcmsCIELabQueryMaxC(XcmsCCC ccc, XcmsFloat hue_angle, XcmsFloat L_star, XcmsColor *color_return);
Status XcmsCIELabQueryMaxL(XcmsCCC ccc, XcmsFloat hue_angle, XcmsFloat chroma, XcmsColor *color_return);
Status XcmsCIELabQueryMaxLC(XcmsCCC ccc, XcmsFloat hue_angle, XcmsColor *color_return);
Status XcmsCIELabQueryMinL(XcmsCCC ccc, XcmsFloat hue_angle, XcmsFloat chroma, XcmsColor *color_return);
Status XcmsCIELuvQueryMaxC(XcmsCCC ccc, XcmsFloat hue_angle, XcmsFloat L_star, XcmsColor *color_return);
Status XcmsCIELuvQueryMaxL(XcmsCCC ccc, XcmsFloat hue_angle, XcmsFloat chroma, XcmsColor *color_return);
Status XcmsCIELuvQueryMaxLC(XcmsCCC ccc, XcmsFloat hue_angle, XcmsColor *color_return);
Status XcmsCIELuvQueryMinL(XcmsCCC ccc, XcmsFloat hue_angle, XcmsFloat chroma, XcmsColor *color_return);
Status XcmsTekHVCQueryMaxC(XcmsCCC ccc, XcmsFloat hue, XcmsFloat value, XcmsColor *color_return);
Status XcmsTekHVCQueryMaxV(XcmsCCC ccc, XcmsFloat hue, XcmsFloat chroma, XcmsColor *color_return);
Status XcmsTekHVCQueryMaxVC(XcmsCCC ccc, XcmsFloat hue, XcmsColor *color_return);
Status XcmsTekHVCQueryMaxVSamples(XcmsCCC ccc, XcmsFloat hue, XcmsColor colors_return[], unsigned int nsamples);
Status XcmsTekHVCQueryMinV(XcmsCCC ccc, XcmsFloat hue, XcmsFloat chroma, XcmsColor *color_return);
Status XcmsAddColorSpace(XcmsColorSpace *color_space);
XcmsColorFormat XcmsFormatOfPrefix(char *prefix);
char *XcmsPrefixOfFormat(XcmsColorFormat format);
Status XcmsParseStringProc(char *color_string, XcmsColor *color_return);
Status ConversionProc(XcmsCCC ccc, XcmsColor *white_point, XcmsColor *colors_in_out, unsigned int ncolors);
Status ConversionProc(XcmsCCC ccc, XcmsColor *colors_in_out, unsigned int ncolors, Bool compression_flags_return[]);
Status XcmsAddFunctionSet(XcmsFunctionSet *function_set);
typedef Status (*XcmsScreenInitProc)(Display *display, int screen_number, ScmsPerScrnInfo *screen_info);
typedef void (*XcmsScreenFreeProc)(XPointer screenData);
GC XCreateGC(Display *display, Drawable d, unsigned long valuemask, XGCValues *values);
XCopyGC(Display *display, GC src, GC dest, unsigned long valuemask);
XChangeGC(Display *display, GC gc, unsigned long valuemask, XGCValues *values);
Status XGetGCValues(Display *display, GC gc, unsigned long valuemask, XGCValues *values_return);
XFreeGC(Display *display, GC gc);
GContext XGContextFromGC(GC gc);
void XFlushGC(Display *display, GC gc);
XSetState(Display *display, GC gc, unsigned long foreground, unsigned long background, int function, unsigned long plane_mask);
XSetForeground(Display *display, GC gc, unsigned long foreground);
XSetBackground(Display *display, GC gc, unsigned long background);
XSetFunction(Display *display, GC gc, int function);
XSetPlaneMask(Display *display, GC gc, unsigned long plane_mask);
XSetLineAttributes(Display *display, GC gc, unsigned int line_width, int line_style, int cap_style, int join_style);
XSetDashes(Display *display, GC gc, int dash_offset, char dash_list[], int n);
XSetFillStyle(Display *display, GC gc, int fill_style);
XSetFillRule(Display *display, GC gc, int fill_rule);
Status XQueryBestSize(Display *display, int class, Drawable which_screen, unsigned int width, unsigned int height, unsigned int *width_return, unsigned int *height_return);
Status XQueryBestTile(Display *display, Drawable which_screen, unsigned int width, unsigned int height, unsigned int *width_return, unsigned int *height_return);
Status XQueryBestStipple(Display *display, Drawable which_screen, unsigned int width, unsigned int height, unsigned int *width_return, unsigned int *height_return);
XSetTile(Display *display, GC gc, Pixmap tile);
XSetStipple(Display *display, GC gc, Pixmap stipple);
XSetTSOrigin(Display *display, GC gc, int ts_x_origin, int ts_y_origin);
XSetFont(Display *display, GC gc, Font font);
XSetClipOrigin(Display *display, GC gc, int clip_x_origin, int clip_y_origin);
XSetClipMask(Display *display, GC gc, Pixmap pixmap);
XSetClipRectangles(Display *display, GC gc, int clip_x_origin, int clip_y_origin, XRectangle rectangles[], int n, int ordering);
XSetArcMode(Display *display, GC gc, int arc_mode);
XSetSubwindowMode(Display *display, GC gc, int subwindow_mode);
XSetGraphicsExposures(Display *display, GC gc, Bool graphics_exposures);
XClearArea(Display *display, Window w, int x, int y, unsigned int width, unsigned int height, Bool exposures);
XClearWindow(Display *display, Window w);
XCopyArea(Display *display, Drawable src, Drawable dest, GC gc, int src_x, int src_y, unsigned int width, unsigned int height, int dest_x, int dest_y);
XCopyPlane(Display *display, Drawable src, Drawable dest, GC gc, int src_x, int src_y, unsigned int width, unsigned int height, int dest_x, int dest_y, unsigned long plane);
XDrawPoint(Display *display, Drawable d, GC gc, int x, int y);
XDrawPoints(Display *display, Drawable d, GC gc, XPoint *points, int npoints, int mode);
XDrawLine(Display *display, Drawable d, GC gc, int x1, int y1, int x2, int y2);
XDrawLines(Display *display, Drawable d, GC gc, XPoint *points, int npoints, int mode);
XDrawSegments(Display *display, Drawable d, GC gc, XSegment *segments, int nsegments);
XDrawRectangle(Display *display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height);
XDrawRectangles(Display *display, Drawable d, GC gc, XRectangle rectangles[], int nrectangles);
XDrawArc(Display *display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height, int angle1, int angle2);
XDrawArcs(Display *display, Drawable d, GC gc, XArc *arcs, int narcs);
XFillRectangle(Display *display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height);
XFillRectangles(Display *display, Drawable d, GC gc, XRectangle *rectangles, int nrectangles);
XFillPolygon(Display *display, Drawable d, GC gc, XPoint *points, int npoints, int shape, int mode);
XFillArc(Display *display, Drawable d, GC gc, int x, int y, unsigned int width, unsigned int height, int angle1, int angle2);
XFillArcs(Display *display, Drawable d, GC gc, XArc *arcs, int narcs);
Font XLoadFont(Display *display, char *name);
XFontStruct *XQueryFont(Display *display, XID font_ID);
XFontStruct *XLoadQueryFont(Display *display, char *name);
XFreeFont(Display *display, XFontStruct *font_struct);
Bool XGetFontProperty(XFontStruct *font_struct, Atom atom, unsigned long *value_return);
XUnloadFont(Display *display, Font font);
char **XListFonts(Display *display, char *pattern, int maxnames, int *actual_count_return);
XFreeFontNames(char *list[]);
char **XListFontsWithInfo(Display *display, char *pattern, int maxnames, int *count_return, XFontStruct **info_return);
XFreeFontInfo(char **names, XFontStruct *free_info, int actual_count);
int XTextWidth(XFontStruct *font_struct, char *string, int count);
int XTextWidth16(XFontStruct *font_struct, XChar2b *string, int count);
XTextExtents(XFontStruct *font_struct, char *string, int nchars, int *direction_return, int *font_ascent_return, int *font_descent_return, XCharStruct *overall_return);
XTextExtents16(XFontStruct *font_struct, XChar2b *string, int nchars, int *direction_return, int *font_ascent_return, int *font_descent_return, XCharStruct *overall_return);
XQueryTextExtents(Display *display, XID font_ID, char *string, int nchars, int *direction_return, int *font_ascent_return, int *font_descent_return, XCharStruct *overall_return);
XQueryTextExtents16(Display *display, XID font_ID, XChar2b *string, int nchars, int *direction_return, int *font_ascent_return, int *font_descent_return, XCharStruct *overall_return);
XDrawText(Display *display, Drawable d, GC gc, int x, int y, XTextItem *items, int nitems);
XDrawText16(Display *display, Drawable d, GC gc, int x, int y, XTextItem16 *items, int nitems);
XDrawString(Display *display, Drawable d, GC gc, int x, int y, char *string, int length);
XDrawString16(Display *display, Drawable d, GC gc, int x, int y, XChar2b *string, int length);
XDrawImageString(Display *display, Drawable d, GC gc, int x, int y, char *string, int length);
XDrawImageString16(Display *display, Drawable d, GC gc, int x, int y, XChar2b *string, int length);
Status XInitImage(XImage *image);
XPutImage(Display *display, Drawable d, GC gc, XImage *image, int src_x, int src_y, int dest_x, int dest_y, unsigned int width, unsigned int height);
XImage *XGetImage(Display *display, Drawable d, int x, int y, unsigned int width, unsigned int height, unsigned long plane_mask, int format);
XImage *XGetSubImage(Display *display, Drawable d, int x, int y, unsigned int width, unsigned int height, unsigned long plane_mask, int format, XImage *dest_image, int dest_x, int dest_y);
XReparentWindow(Display *display, Window w, Window parent, int x, int y);
XChangeSaveSet(Display *display, Window w, int change_mode);
XAddToSaveSet(Display *display, Window w);
XRemoveFromSaveSet(Display *display, Window w);
XInstallColormap(Display *display, Colormap colormap);
XUninstallColormap(Display *display, Colormap colormap);
Colormap *XListInstalledColormaps(Display *display, Window w, int *num_return);
XSetFontPath(Display *display, char **directories, int ndirs);
char **XGetFontPath(Display *display, int *npaths_return);
XFreeFontPath(char **list);
XGrabServer(Display *display);
XUngrabServer(Display *display);
XKillClient(Display *display, XID resource);
XSetScreenSaver(Display *display, int timeout, int interval, int prefer_blanking, int allow_exposures);
XForceScreenSaver(Display *display, int mode);
XActivateScreenSaver(Display *display);
XResetScreenSaver(Display *display);
XGetScreenSaver(Display *display, int *timeout_return, int *interval_return, int *prefer_blanking_return, int *allow_exposures_return);
XAddHost(Display *display, XHostAddress *host);
XAddHosts(Display *display, XHostAddress *hosts, int num_hosts);
XHostAddress *XListHosts(Display *display, int *nhosts_return, Bool *state_return);
XRemoveHost(Display *display, XHostAddress *host);
XRemoveHosts(Display *display, XHostAddress *hosts, int num_hosts);
XSetAccessControl(Display *display, int mode);
XEnableAccessControl(Display *display);
XDisableAccessControl(Display *display);
XSelectInput(Display *display, Window w, long event_mask);
XFlush(Display *display);
XSync(Display *display, Bool discard);
int XEventsQueued(Display *display, int mode);
int XPending(Display *display);
XNextEvent(Display *display, XEvent *event_return);
XPeekEvent(Display *display, XEvent *event_return);
Bool(Display *display, XEvent *event, XPointer arg);
XIfEvent(Display *display, XEvent *event_return, Bool (*predicate)(), XPointer arg);
Bool XCheckIfEvent(Display *display, XEvent *event_return, Bool (*predicate)(), XPointer arg);
XPeekIfEvent(Display *display, XEvent *event_return, Bool (*predicate)(), XPointer arg);
XWindowEvent(Display *display, Window w, long event_mask, XEvent *event_return);
Bool XCheckWindowEvent(Display *display, Window w, long event_mask, XEvent *event_return);
XMaskEvent(Display *display, long event_mask, XEvent *event_return);
Bool XCheckMaskEvent(Display *display, long event_mask, XEvent *event_return);
Bool XCheckTypedEvent(Display *display, int event_type, XEvent *event_return);
Bool XCheckTypedWindowEvent(Display *display, Window w, int event_type, XEvent *event_return);
XPutBackEvent(Display *display, XEvent *event);
Status XSendEvent(Display *display, Window w, Bool propagate, long event_mask, XEvent *event_send);
unsigned long(Display *display);
XTimeCoord *XGetMotionEvents(Display *display, Window w, Time start, Time stop, int *nevents_return);
int(Display *display, int (*procedure)());
int(Display *display, Bool onoff);
int *XSetErrorHandler(int *handler);
XGetErrorText(Display *display, int code, char *buffer_return, int length);
XGetErrorDatabaseText(Display *display, char *name, char *message, char *default_string, char *buffer_return, int length);
char *XDisplayName(char *string);
int(int(*handler)(Display *));
int XGrabPointer(Display *display, Window grab_window, Bool owner_events, unsigned int event_mask, int pointer_mode, int keyboard_mode, Window confine_to, Cursor cursor, Time time);
XUngrabPointer(Display *display, Time time);
XChangeActivePointerGrab(Display *display, unsigned int event_mask, Cursor cursor, Time time);
XGrabButton(Display *display, unsigned int button, unsigned int modifiers, Window grab_window, Bool owner_events, unsigned int event_mask, int pointer_mode, int keyboard_mode, Window confine_to, Cursor cursor);
XUngrabButton(Display *display, unsigned int button, unsigned int modifiers, Window grab_window);
int XGrabKeyboard(Display *display, Window grab_window, Bool owner_events, int pointer_mode, int keyboard_mode, Time time);
XUngrabKeyboard(Display *display, Time time);
XGrabKey(Display *display, int keycode, unsigned int modifiers, Window grab_window, Bool owner_events, int pointer_mode, int keyboard_mode);
XUngrabKey(Display *display, int keycode, unsigned int modifiers, Window grab_window);
XAllowEvents(Display *display, int event_mode, Time time);
XWarpPointer(Display *display, Window src_w, Window dest_w, int src_x, int src_y, unsigned int src_width, unsigned int src_height, int dest_x, int dest_y);
XSetInputFocus(Display *display, Window focus, int revert_to, Time time);
XGetInputFocus(Display *display, Window *focus_return, int *revert_to_return);
XChangeKeyboardControl(Display *display, unsigned long value_mask, XKeyboardControl *values);
XGetKeyboardControl(Display *display, XKeyboardState *values_return);
XAutoRepeatOn(Display *display);
XAutoRepeatOff(Display *display);
XBell(Display *display, int percent);
XQueryKeymap(Display *display, char keys_return[32]);
int XSetPointerMapping(Display *display, unsignedchar map[], int nmap);
int XGetPointerMapping(Display *display, unsignedchar map_return[], int nmap);
XChangePointerControl(Display *display, Bool do_accel, Bool do_threshold, int accel_numerator, int accel_denominator, int threshold);
XGetPointerControl(Display *display, int *accel_numerator_return, int *accel_denominator_return, int *threshold_return);
XDisplayKeycodes(Display *display, int *min_keycodes_return, int *max_keycodes_return);
KeySym *XGetKeyboardMapping(Display *display, KeyCode first_keycode, int keycode_count, int *keysyms_per_keycode_return);
XChangeKeyboardMapping(Display *display, int first_keycode, int keysyms_per_keycode, KeySym *keysyms, int num_codes);
XModifierKeymap *XNewModifiermap(int max_keys_per_mod);
XModifierKeymap *XInsertModifiermapEntry(XModifierKeymap *modmap, KeyCode keycode_entry, int modifier);
XModifierKeymap *XDeleteModifiermapEntry(XModifierKeymap *modmap, KeyCode keycode_entry, int modifier);
XFreeModifiermap(XModifierKeymap *modmap);
int XSetModifierMapping(Display *display, XModifierKeymap *modmap);
XModifierKeymap *XGetModifierMapping(Display *display);
Bool XSupportsLocale(void);
char *XSetLocaleModifiers(char *modifier_list);
XVaNestedList XVaCreateNestedList(int dummy);
XOM XOpenOM(Display *display, XrmDatabase db, char *res_name, char *res_class);
Status XCloseOM(XOM om);
char *XSetOMValues(XOM om);
char *XGetOMValues(XOM om);
Display *XDisplayOfOM(XOM om);
char *XLocaleOfOM(XOM om);
XOC XCreateOC(XOM om);
void XDestroyOC(XOC oc);
XOM XOMOfOC(XOC oc);
char *XSetOCValues(XOC oc);
char *XGetOCValues(XOC oc);
XFontSet XCreateFontSet(Display *display, char *base_font_name_list, char ***missing_charset_list_return, int *missing_charset_count_return, char **def_string_return);
int XFontsOfFontSet(XFontSet font_set, XFontStruct ***font_struct_list_return, char ***font_name_list_return);
char *XBaseFontNameListOfFontSet(XFontSet font_set);
char *XLocaleOfFontSet(XFontSet font_set);
void XFreeFontSet(Display *display, XFontSet font_set);
Bool XDirectionalDependentDrawing(XFontSet font_set);
Bool XContextualDrawing(XFontSet font_set);
Bool XContextDependentDrawing(XFontSet font_set);
XFontSetExtents *XExtentsOfFontSet(XFontSet font_set);
int XmbTextEscapement(XFontSet font_set, char *string, int num_bytes);
int XwcTextEscapement(XFontSet font_set, wchar_t *string, int num_wchars);
int XmbTextExtents(XFontSet font_set, char *string, int num_bytes, XRectangle *overall_ink_return, XRectangle *overall_logical_return);
int XwcTextExtents(XFontSet font_set, wchar_t *string, int num_wchars, XRectangle *overall_ink_return, XRectangle *overall_logical_return);
Status XmbTextPerCharExtents(XFontSet font_set, char *string, int num_bytes, XRectangle *ink_array_return, XRectangle *logical_array_return, int array_size, int *num_chars_return, XRectangle *overall_ink_return, XRectangle *overall_logical_return);
Status XwcTextPerCharExtents(XFontSet font_set, wchar_t *string, int num_wchars, XRectangle *ink_array_return, XRectangle *logical_array_return, int array_size, int *num_chars_return, XRectangle *overall_ink_return, XRectangle *overall_logical_return);
void XmbDrawText(Display *display, Drawable d, GC gc, int x, int y, XmbTextItem *items, int nitems);
void XwcDrawText(Display *display, Drawable d, GC gc, int x, int y, XwcTextItem *items, int nitems);
void XmbDrawString(Display *display, Drawable d, XFontSet font_set, GC gc, int x, int y, char *string, int num_bytes);
void XwcDrawString(Display *display, Drawable d, XFontSet font_set, GC gc, int x, int y, wchar_t *string, int num_wchars);
void XmbDrawImageString(Display *display, Drawable d, XFontSet font_set, GC gc, int x, int y, char *string, int num_bytes);
void XwcDrawImageString(Display *display, Drawable d, XFontSet font_set, GC gc, int x, int y, wchar_t *string, int num_wchars);
XIM XOpenIM(Display *display, XrmDatabase db, char *res_name, char *res_class);
Status XCloseIM(XIM im);
char *XSetIMValues(XIM im);
char *XGetIMValues(XIM im);
Display *XDisplayOfIM(XIM im);
char *XLocaleOfIM(XIM im);
Bool XRegisterIMInstantiateCallback(Display *display, XrmDatabase db, char *res_name, char *res_class, XIMProc callback, XPointer *client_data);
void IMInstantiateCallback(Display *display, XPointer client_data, XPointer call_data);
Bool XUnregisterIMInstantiateCallback(Display *display, XrmDatabase db, char *res_name, char *res_class, XIMProc callback, XPointer *client_data);
void DestroyCallback(XIM im, XPointer client_data, XPointer call_data);
XIC XCreateIC(XIM im);
void XDestroyIC(XIC ic);
void XSetICFocus(XIC ic);
void XUnsetICFocus(XIC ic);
char *XmbResetIC(XIC ic);
wchar_t *XwcResetIC(XIC ic);
XIM XIMOfIC(XIC ic);
char *XSetICValues(XIC ic);
char *XGetICValues(XIC ic);
void PreeditStateNotifyCallback(XIC ic, XPointer client_data, XIMPreeditStateNotifyCallbackStruct *call_data);
void CallbackPrototype(XIC ic, XPointer client_data, SomeType call_data);
void GeometryCallback(XIC ic, XPointer client_data, XPointer call_data);
void DestroyCallback(XIC ic, XPointer client_data, XPointer call_data);
void StringConversionCallback(XIC ic, XPointer client_data, XIMStringConversionCallbackStruct *call_data);
int PreeditStartCallback(XIC ic, XPointer client_data, XPointer call_data);
void PreeditDoneCallback(XIC ic, XPointer client_data, XPointer call_data);
void PreeditDrawCallback(XIC ic, XPointer client_data, XIMPreeditDrawCallbackStruct *call_data);
void PreeditCaretCallback(XIC ic, XPointer client_data, XIMPreeditCaretCallbackStruct *call_data);
void StatusStartCallback(XIC ic, XPointer client_data, XPointer call_data);
void StatusDoneCallback(XIC ic, XPointer client_data, XPointer call_data);
void StatusDrawCallback(XIC ic, XPointer client_data, XIMStatusDrawCallbackStruct *call_data);
Bool XFilterEvent(XEvent *event, Window w);
int XmbLookupString(XIC ic, XKeyPressedEvent *event, char *buffer_return, int bytes_buffer, KeySym *keysym_return, Status *status_return);
int XwcLookupString(XIC ic, XKeyPressedEvent *event, wchar_t *buffer_return, int wchars_buffer, KeySym *keysym_return, Status *status_return);
Status XIconifyWindow(Display *display, Window w, int screen_number);
Status XWithdrawWindow(Display *display, Window w, int screen_number);
Status XReconfigureWMWindow(Display *display, Window w, int screen_number, unsigned int value_mask, XWindowChanges *values);
int XmbTextListToTextProperty(Display *display, char **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return);
int XwcTextListToTextProperty(Display *display, wchar_t **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return);
int XmbTextPropertyToTextList(Display *display, XTextProperty *text_prop, char ***list_return, int *count_return);
int XwcTextPropertyToTextList(Display *display, XTextProperty *text_prop, wchar_t ***list_return, int *count_return);
void XwcFreeStringList(wchar_t **list);
char *XDefaultString(void);
Status XStringListToTextProperty(char **list, int count, XTextProperty *text_prop_return);
Status XTextPropertyToStringList(XTextProperty *text_prop, char ***list_return, int *count_return);
void XFreeStringList(char **list);
void XSetTextProperty(Display *display, Window w, XTextProperty *text_prop, Atom property);
Status XGetTextProperty(Display *display, Window w, XTextProperty *text_prop_return, Atom property);
void XSetWMName(Display *display, Window w, XTextProperty *text_prop);
Status XGetWMName(Display *display, Window w, XTextProperty *text_prop_return);
XStoreName(Display *display, Window w, char *window_name);
Status XFetchName(Display *display, Window w, char **window_name_return);
void XSetWMIconName(Display *display, Window w, XTextProperty *text_prop);
Status XGetWMIconName(Display *display, Window w, XTextProperty *text_prop_return);
XSetIconName(Display *display, Window w, char *icon_name);
Status XGetIconName(Display *display, Window w, char **icon_name_return);
XWMHints *XAllocWMHints(void);
XSetWMHints(Display *display, Window w, XWMHints *wmhints);
XWMHints *XGetWMHints(Display *display, Window w);
XSizeHints *XAllocSizeHints(void);
void XSetWMNormalHints(Display *display, Window w, XSizeHints *hints);
Status XGetWMNormalHints(Display *display, Window w, XSizeHints *hints_return, long *supplied_return);
void XSetWMSizeHints(Display *display, Window w, XSizeHints *hints, Atom property);
Status XGetWMSizeHints(Display *display, Window w, XSizeHints *hints_return, long *supplied_return, Atom property);
XClassHint *XAllocClassHint(void);
XSetClassHint(Display *display, Window w, XClassHint *class_hints);
Status XGetClassHint(Display *display, Window w, XClassHint *class_hints_return);
XSetTransientForHint(Display *display, Window w, Window prop_window);
Status XGetTransientForHint(Display *display, Window w, Window *prop_window_return);
Status XSetWMProtocols(Display *display, Window w, Atom *protocols, int count);
Status XGetWMProtocols(Display *display, Window w, Atom **protocols_return, int *count_return);
Status XSetWMColormapWindows(Display *display, Window w, Window *colormap_windows, int count);
Status XGetWMColormapWindows(Display *display, Window w, Window **colormap_windows_return, int *count_return);
XIconSize *XAllocIconSize(void);
XSetIconSizes(Display *display, Window w, XIconSize *size_list, int count);
Status XGetIconSizes(Display *display, Window w, XIconSize **size_list_return, int *count_return);
void XmbSetWMProperties(Display *display, Window w, char *window_name, char *icon_name, char *argv[], int argc, XSizeHints *normal_hints, XWMHints *wm_hints, XClassHint *class_hints);
void XSetWMProperties(Display *display, Window w, XTextProperty *window_name, XTextProperty *icon_name, char **argv, int argc, XSizeHints *normal_hints, XWMHints *wm_hints, XClassHint *class_hints);
XSetCommand(Display *display, Window w, char **argv, int argc);
Status XGetCommand(Display *display, Window w, char ***argv_return, int *argc_return);
void XSetWMClientMachine(Display *display, Window w, XTextProperty *text_prop);
Status XGetWMClientMachine(Display *display, Window w, XTextProperty *text_prop_return);
XStandardColormap *XAllocStandardColormap(void);
void XSetRGBColormaps(Display *display, Window w, XStandardColormap *std_colormap, int count, Atom property);
Status XGetRGBColormaps(Display *display, Window w, XStandardColormap **std_colormap_return, int *count_return, Atom property);
XrmQuark XrmUniqueQuark(void);
XrmQuark XrmStringToQuark(char *string);
char *XrmQuarkToString(XrmQuark quark);
void XrmStringToQuarkList(char *string, XrmQuarkList quarks_return);
XrmStringToBindingQuarkList(char *string, XrmBindingList bindings_return, XrmQuarkList quarks_return);
void XrmInitialize(void XrmInitialize(\|));
XrmDatabase XrmGetFileDatabase(char *filename);
void XrmPutFileDatabase(XrmDatabase database, char *stored_db);
char *XResourceManagerString(Display *display);
char *XScreenResourceString(Screen *screen);
XrmDatabase XrmGetStringDatabase(char *data);
char *XrmLocaleOfDatabase(XrmDatabase database);
void XrmDestroyDatabase(XrmDatabase database);
void XrmSetDatabase(Display *display, XrmDatabase database);
XrmDatabase XrmGetDatabase(Display *display);
Status XrmCombineFileDatabase(char *filename, XrmDatabase *target_db, Bool override);
void XrmCombineDatabase(XrmDatabase source_db, XrmDatabase *target_db, Bool override);
void XrmMergeDatabases(XrmDatabase source_db, XrmDatabase *target_db);
Bool XrmGetResource(XrmDatabase database, char *str_name, char *str_class, char **str_type_return, XrmValue *value_return);
Bool XrmQGetResource(XrmDatabase database, XrmNameList quark_name, XrmClassList quark_class, XrmRepresentation *quark_type_return, XrmValue *value_return);
Bool XrmQGetSearchResource(XrmDatabase database, XrmNameList names, XrmClassList classes, XrmSearchList list_return, int list_length);
Bool XrmQGetSearchResource(XrmSearchList list, XrmName name, XrmClass class, XrmRepresentation *type_return, XrmValue *value_return);
void XrmPutResource(XrmDatabase *database, char *specifier, char *type, XrmValue *value);
void XrmQPutResource(XrmDatabase *database, XrmBindingList bindings, XrmQuarkList quarks, XrmRepresentation type, XrmValue *value);
void XrmPutStringResource(XrmDatabase *database, char *specifier, char *value);
void XrmQPutStringResource(XrmDatabase *database, XrmBindingList bindings, XrmQuarkList quarks, char *value);
void XrmPutLineResource(XrmDatabase *database, char *line);
Bool XrmEnumerateDatabase(XrmDatabase database, XrmNameList name_prefix, XrmClassList class_prefix, int mode, Bool (*proc)(), XPointer arg);
void XrmParseCommand(XrmDatabase *database, XrmOptionDescList table, int table_count, char *name, int *argc_in_out, char **argv_in_out);
KeySym XLookupKeysym(XKeyEvent *key_event, int index);
KeySym XKeycodeToKeysym(Display *display, KeyCode keycode, int index);
KeyCode XKeysymToKeycode(Display *display, KeySym keysym);
XRefreshKeyboardMapping(XMappingEvent *event_map);
void XConvertCase(KeySym keysym, KeySym *lower_return, KeySym *upper_return);
KeySym XStringToKeysym(char *string);
char *XKeysymToString(KeySym keysym);
int XLookupString(XKeyEvent *event_struct, char *buffer_return, int bytes_buffer, KeySym *keysym_return, XComposeStatus *status_in_out);
XRebindKeysym(Display *display, KeySym keysym, KeySym list[ ], int mod_count, unsignedchar *string, int num_bytes);
char *Xpermalloc(unsigned int size);
int XParseGeometry(char *parsestring, int *x_return, int *y_return, unsigned int *width_return, unsigned int *height_return);
int XWMGeometry(Display *display, int screen, char *user_geom, char *def_geom, unsigned int bwidth, XSizeHints *hints, int *x_return, int *y_return, int *width_return, int *height_return, int *gravity_return);
Region XCreateRegion(void);
Region XPolygonRegion(XPoint points[], int n, int fill_rule);
XSetRegion(Display *display, GC gc, Region r);
XDestroyRegion(Region r);
XOffsetRegion(Region r, int dx, int dy);
XShrinkRegion(Region r, int dx, int dy);
XClipBox(Region r, XRectangle *rect_return);
XIntersectRegion(Region sra, Region srb, Region dr_return);
XUnionRegion(Region sra, Region srb, Region dr_return);
XUnionRectWithRegion(XRectangle *rectangle, Region src_region, Region dest_region_return);
XSubtractRegion(Region sra, Region srb, Region dr_return);
XXorRegion(Region sra, Region srb, Region dr_return);
Bool XEmptyRegion(Region r);
Bool XEqualRegion(Region r1, Region r2);
Bool XPointInRegion(Region r, int x, int y);
int XRectInRegion(Region r, int x, int y, unsigned int width, unsigned int height);
XStoreBytes(Display *display, char *bytes, int nbytes);
XStoreBuffer(Display *display, char *bytes, int nbytes, int buffer);
char *XFetchBytes(Display *display, int *nbytes_return);
char *XFetchBuffer(Display *display, int *nbytes_return, int buffer);
XRotateBuffers(Display *display, int rotate);
XVisualInfo *XGetVisualInfo(Display *display, long vinfo_mask, XVisualInfo *vinfo_template, int *nitems_return);
Status XMatchVisualInfo(Display *display, int screen, int depth, int class, XVisualInfo *vinfo_return);
XImage *XCreateImage(Display *display, Visual *visual, unsigned int depth, int format, int offset, char *data, unsigned int width, unsigned int height, int bitmap_pad, int bytes_per_line);
unsigned long XGetPixel(XImage *ximage, int x, int y);
XPutPixel(XImage *ximage, int x, int y, unsigned long pixel);
XImage *XSubImage(XImage *ximage, int x, int y, unsigned int subimage_width, unsigned int subimage_height);
XAddPixel(XImage *ximage, long value);
XDestroyImage(XImage *ximage);
int XReadBitmapFile(Display *display, Drawable d, char *filename, unsigned int *width_return, unsigned int *height_return, Pixmap *bitmap_return, int *x_hot_return, int *y_hot_return);
int XReadBitmapFileData(char *filename, unsigned int *width_return, unsigned int *height_return, unsignedchar *data_return, int *x_hot_return, int *y_hot_return);
int XWriteBitmapFile(Display *display, char *filename, Pixmap bitmap, unsigned int width, unsigned int height, int x_hot, int y_hot);
Pixmap XCreatePixmapFromBitmapData(Display *display, Drawable d, char *data, unsigned int width, unsigned int height, unsigned long fg, unsigned long bg, unsigned int depth);
Pixmap XCreateBitmapFromData(Display *display, Drawable d, char *data, unsigned int width, unsigned int height);
int XSaveContext(Display *display, XID rid, XContext context, XPointer data);
int XFindContext(Display *display, XID rid, XContext context, XPointer *data_return);
int XDeleteContext(Display *display, XID rid, XContext context);
XContext XUniqueContext(void);
Bool XQueryExtension(Display *display, char *name, int *major_opcode_return, int *first_event_return, int *first_error_return);
char **XListExtensions(Display *display, int *nextensions_return);
XFreeExtensionList(char **list);
XExtCodes *XInitExtension(Display *display, char *name);
XExtCodes *XAddExtension(Display *display);
int XESetCloseDisplay(Display *display, int extension, int (*proc)());
int (*proc)(Display *display, XExtCodes *codes);
int *XESetCreateGC(Display *display, int extension, int (*proc)());
int (*proc)(Display *display, GC gc, XExtCodes *codes);
int *XESetCopyGC(Display *display, int extension, int (*proc)());
int (*proc)(Display *display, GC gc, XExtCodes *codes);
int *XESetFreeGC(Display *display, int extension, int (*proc)());
int (*proc)(Display *display, GC gc, XExtCodes *codes);
int *XESetCreateFont(Display *display, int extension, int (*proc)());
int (*proc)(Display *display, XFontStruct *fs, XExtCodes *codes);
int *XESetFreeFont(Display *display, int extension, int (*proc)());
int (*proc)(Display *display, XFontStruct *fs, XExtCodes *codes);
int *XESetWireToEvent(Display *display, int event_number, Status (*proc)());
int (*proc)(Display *display, XEvent *re, xEvent *event);
unsigned long_XSetLastRequestRead(Display *display, xGenericReply *rep);
Status *XESetEventToWire(Display *display, int event_number, int (*proc)());
int (*proc)(Display *display, XEvent *re, xEvent *event);
Bool *XESetWireToError(Display *display, int error_number, Bool (*proc)());
int (*proc)(Display *display, XErrorEvent *he, xError *we);
int *XESetError(Display *display, int extension, int (*proc)());
int (*proc)(Display *display, xError *err, XExtCodes *codes, int *ret_code);
char *XESetErrorString(Display *display, int extension, char *(*proc)());
int (*proc)(Display *display, int code, XExtCodes *codes, char *buffer, int nbytes);
void *XESetPrintErrorValues(Display *display, int extension, void (*proc)());
void (*proc)(Display *display, XErrorEvent *ev, void *fp);
int *XESetFlushGC(Display *display, int extension, int *(*proc)());
int *XESetCopyGC(Display *display, int extension, int *(*proc)());
void (*proc)(Display *display, XExtCodes *codes, char *data, long len);
XExtData **XEHeadOfExtensionList(XEDataObject object);
XAddToExtensionList(XExtData **structure, XExtData *ext_data);
XExtData *XFindOnExtensionList(struct_XExtData **structure, int number);
XAllocID(Display *display);
XAllocIDs(Display *display, XID *ids_return, int count);
FlushGC(Display *display, GC gc);
_XFlushGCCache(Display *display, GC gc);
LockDisplay(Display *display);
UnlockDisplay(Display *display);
Data(display, (char *) data, nbytes);Data16(display, (short *) data, nbytes);Data32(display, (long *) data, nbytes);
Status _XReply(Display *display, xReply *rep, int extra, Bool discard);
_XRead(Display *display, char *data_return, long nbytes);
_XRead16(Display *display, short *data_return, long nbytes);
_XRead32(Display *display, long *data_return, long nbytes);
_XRead16Pad(Display *display, short *data_return, long nbytes);
_XReadPad(Display *display, char *data_return, long nbytes);
char *_XAllocScratch(Display *display, unsigned long nbytes);
char *_XAllocTemp(Display *display, unsigned long nbytes);
void _XFreeTemp(Display *display, char *buf, unsigned long nbytes);
XSetStandardProperties(Display *display, Window w, char *window_name, char *icon_name, Pixmap icon_pixmap, char **argv, int argc, XSizeHints *hints);
XSetNormalHints(Display *display, Window w, XSizeHints *hints);
Status XGetNormalHints(Display *display, Window w, XSizeHints *hints_return);
XSetZoomHints(Display *display, Window w, XSizeHints *zhints);
Status XGetZoomHints(Display *display, Window w, XSizeHints *zhints_return);
XSetSizeHints(Display *display, Window w, XSizeHints *hints, Atom property);
Status XGetSizeHints(Display *display, Window w, XSizeHints *hints_return, Atom property);
Status XGetStandardColormap(Display *display, Window w, XStandardColormap *colormap_return, Atom property);
XSetStandardColormap(Display *display, Window w, XStandardColormap *colormap, Atom property);
int XGeometry(Display *display, int screen, char *position, char *default_position, unsigned int bwidth, unsigned int fwidth, unsigned int fheight, int xadder, int yadder, int *x_return, int *y_return, int *width_return, int *height_return);
char *XGetDefault(Display *display, char *program, char *option);
Status XDraw(Display *display, Drawable d, GC gc, Vertex *vlist, int vcount);
Status XDrawFilled(Display *display, Drawable d, GC gc, Vertex *vlist, int vcount);
XAssocTable *XCreateAssocTable(int size);
XMakeAssoc(Display *display, XAssocTable *table, XID x_id, char *data);
char *XLookUpAssoc(Display *display, XAssocTable *table, XID x_id);
XDeleteAssoc(Display *display, XAssocTable *table, XID x_id);
XDestroyAssocTable(XAssocTable *table);
