<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hereket</title>
    <link>https://hereket.com/posts/</link>
    <description>Recent content in Posts on Hereket</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Hereket All rights reserved</copyright>
    <lastBuildDate>Tue, 29 Apr 2025 17:12:31 +0500</lastBuildDate>
    <atom:link href="https://hereket.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Crafting a visualizer for an interpreter of a toy langguage</title>
      <link>https://hereket.com/posts/interpreter-debugger-visualizer/</link>
      <pubDate>Tue, 29 Apr 2025 17:12:31 +0500</pubDate>
      <guid>https://hereket.com/posts/interpreter-debugger-visualizer/</guid>
      <description>&lt;h3 id=&#34;intro&#34;&gt;Intro&lt;/h3&gt;&#xA;&lt;p&gt;Linkg to the demo: &lt;a href=&#34;http://localhost:1313/tiny/interpreter-debugger/&#34;&gt;Interpereter visualizer&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;I experimented with Dart for desktop and web development, and I wanted to build&#xA;a non-trivial application to stress-test whether it could handle a more complex&#xA;project. For quite some time, I’d had an idea to build a visualizer for a&#xA;programming language, and it seemed like a project with an appropriate&#xA;difficulty level for this purpose.&lt;/p&gt;&#xA;&lt;p&gt;For this project, there were a few possible languages to visualize. Some were&#xA;eliminated due to their complexity, and others were too dynamic. Lua was a good&#xA;candidate, but it didn’t feel quite right. Instead, we’ll use a toy language&#xA;named Lox. Its grammar is stable and well-defined, it covers most of the core&#xA;concepts found in modern popular languages, and—most importantly—there’s a &lt;a href=&#34;(https://craftinginterpreters.com/)&#34;&gt;book&#xA;by Robert Nystrom&lt;/a&gt; that describes how to&#xA;build your own implementation if you’re interested.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Comparing C/C&#43;&#43; unity build with regular build on a large codebase</title>
      <link>https://hereket.com/posts/cpp-unity-compile-inkscape/</link>
      <pubDate>Wed, 03 Jul 2024 15:04:08 +0500</pubDate>
      <guid>https://hereket.com/posts/cpp-unity-compile-inkscape/</guid>
      <description>&lt;h3 id=&#34;intro&#34;&gt;Intro&lt;/h3&gt;&#xA;&lt;p&gt;From the beginning, C/C++ code has been compiled into separate small code&#xA;objects and later linked into one executable or library. Initially, it was done&#xA;due to hardware limitations as it couldn&amp;rsquo;t process all code simultaneously. These&#xA;days it is done to increase compilation speed by trying to compile just a small&#xA;portion of changed code after the initial full build.&lt;/p&gt;&#xA;&lt;p&gt;For my own smaller C projects I have been using &lt;strong&gt;unity build&lt;/strong&gt; and were doing&#xA;full project rebuild. I do it just for convenience and it is easier to&#xA;manage and build for my purposes. There are people &amp;ldquo;on the internet&amp;rdquo; who claim&#xA;that even a larger C++ project could have been built using unity build without&#xA;much increase in compilation times. Even though I am a bit skeptical that this&#xA;could be done on a larger scale I was interested in measuring actual timings.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simplified explanation of how RSA message encryption/decryption works</title>
      <link>https://hereket.com/posts/rsa-algorithm/</link>
      <pubDate>Sun, 16 Jun 2024 03:30:59 +0500</pubDate>
      <guid>https://hereket.com/posts/rsa-algorithm/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;After making a small DES illustration I wanted to create similar thing but for&#xA;AES. After some consideration I decided not to do it as it was very similar and&#xA;decided to go with RSA because I really liked it on first encounter with the&#xA;algorithm. From all the algorithms used in SSL it felt like RSA is the simplest&#xA;and most elegant one. I will try to show it&amp;rsquo;s simplicity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Networking without programming or using netcat, echo, head and file system to create X11 windows</title>
      <link>https://hereket.com/posts/opening-x11-window-with-bash-nc-echo/</link>
      <pubDate>Thu, 16 May 2024 13:03:59 +0500</pubDate>
      <guid>https://hereket.com/posts/opening-x11-window-with-bash-nc-echo/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hereket.com/posts/opening-x11-window-with-bash-nc-echo/head.png&#34; alt=&#34;heading&#34;&gt;&lt;/p&gt;&#xA;&#xA;    &#xA;&lt;br&gt;&#xA;&lt;iframe style=&#34;background: gray;&#34; class=&#34;full-width&#34; height=&#34;400&#34; src=&#34;https://www.youtube.com/embed/kkIGb8hg634&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;This post is continuation of previous crazy post about &lt;a href=&#34;https://hereket.com/posts/opening-x11-window-with-bash-nc-echo/&#34;&gt;creating X11 windows&#xA;with c and sockets&lt;/a&gt; but a little&#xA;more crazier. There is a thin line between genious and insanity and this time&#xA;winds blew us to the side of crazines. The problem is that I nerd sniped myself&#xA;into thinking that since opening X11 windows is just &amp;ldquo;networking&amp;rdquo;, it should be&#xA;possible in few lines of bash to send correct bytes to X server and open a window.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Opening windows in linux with sockets, bare hands and 200 lines of C</title>
      <link>https://hereket.com/posts/from-scratch-x11-windowing/</link>
      <pubDate>Wed, 08 May 2024 01:35:54 +0500</pubDate>
      <guid>https://hereket.com/posts/from-scratch-x11-windowing/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hereket.com/posts/from-scratch-x11-windowing/images/base.png&#34; alt=&#34;Simple x11 window opened with&#xA;sockets&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;&#xA;&lt;p&gt;In this post I want to create a single file C file program to open a windows&#xA;inside Linux without using xlib or any similar libraries. The idea is to explore&#xA;X11 protocol and see how it is used to interact with X server to create windows.&lt;/p&gt;&#xA;&lt;p&gt;Before I had strong association that X11 was some magic thing to manipulate windows&#xA;and it&amp;rsquo;s resources. I was very surprised to learn that it is actually just a&#xA;&amp;ldquo;regular&amp;rdquo; &lt;strong&gt;network&lt;/strong&gt; protocol for two parties to communicate like HTTP, FTP,&#xA;IMAP, SMPT and etc. But if in IMAP your have a server that contains all your&#xA;emails and you send it commands to get information about emails and get their&#xA;content. In X11 you have a server that contains all your windows and its&#xA;resources and you just communicate with it via a connection.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Equally distributing uploaded files with md5 hashing of timestamp</title>
      <link>https://hereket.com/posts/hash-naming-uploaded-files/</link>
      <pubDate>Wed, 01 May 2024 19:22:47 +0500</pubDate>
      <guid>https://hereket.com/posts/hash-naming-uploaded-files/</guid>
      <description>&lt;p&gt;Lately I have been digging into django source code to find out how to get access&#xA;to actual file field for renaming during upload in general case. This turned&#xA;out to be impossible because this information is lost as django passes whole&#xA;instance to &lt;strong&gt;upload_to&lt;/strong&gt; instead of file field itself. There was a need to do&#xA;some magic during file upload based on the actual file content hash. But during&#xA;the exploration I found that for a long time I have been using two level depth&#xA;folder structure to limit amount of files stored per folder. It looked a bit&#xA;reduntant for my usecases and led me to exploration of how should I split the&#xA;files into folders.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xlib 05: Single file,local shadertoy with hot reloading</title>
      <link>https://hereket.com/posts/x11_xlib_window_local_shadertoy/</link>
      <pubDate>Sat, 27 Apr 2024 02:27:07 +0500</pubDate>
      <guid>https://hereket.com/posts/x11_xlib_window_local_shadertoy/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://hereket.com/posts/x11_xlib_window_local_shadertoy/program-with-code.png&#34; alt=&#34;asdfasdf&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;In last post we looked at doing some opengl and shaders with raw xlib. It was&#xA;done in with single &amp;lsquo;.c&amp;rsquo; file for simplicity. Here we will create almost the&#xA;same thing but with autoreloading shaders on content change. There still will be&#xA;just one &amp;lsquo;.c&amp;rsquo; file but shaders will be split into their own files for easier&#xA;editing.&lt;/p&gt;&#xA;&lt;p&gt;The code as usual will be focused around simplicity and ignoring some error&#xA;checking, speed optimization and etc.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Poor mans autoreload server in single file python on linux</title>
      <link>https://hereket.com/posts/linux_live_reload_python_server/</link>
      <pubDate>Sat, 20 Apr 2024 14:45:52 +0500</pubDate>
      <guid>https://hereket.com/posts/linux_live_reload_python_server/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&#xA;    &#xA;&lt;iframe style=&#34;background: gray;&#34; class=&#34;full-width&#34; height=&#34;400&#34; src=&#34;https://www.youtube.com/embed/4BDpljbI5Vc&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen&gt;&lt;/iframe&gt;&#xA;&#xA;&#xA;&#xA;&lt;p&gt;In this post I wanted to explore creating a simple python server with automatic&#xA;browser page reload on content change. There are many livereload servers in the&#xA;wild and I used quite a few of them. For example Hugo has a local server with&#xA;auto reload, javascript developers have pretty good local servers when using&#xA;react and etc.&lt;/p&gt;&#xA;&lt;p&gt;But all these servers requre setup, download a lot of files, download runtimes&#xA;or to put simply they have some friction. This is fine if used for a bigger&#xA;project and I do use them but I quite often do some crazy experiments with&#xA;js/css/html and don&amp;rsquo;t want to any setup, configure settings or do anything not&#xA;related to the idea. My most favourite tool for this is &lt;code&gt;python -m http.server&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xlib 04: From scratch opengl and shaders with raw Xlib</title>
      <link>https://hereket.com/posts/x11_window_with_shaders/</link>
      <pubDate>Tue, 26 Mar 2024 22:18:19 +0500</pubDate>
      <guid>https://hereket.com/posts/x11_window_with_shaders/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the &lt;a href=&#34;https://hereket.com/posts/x11_opengl_window_fixed_function&#34;&gt;last post&lt;/a&gt; we looked into how&#xA;to create a window with basic OpenGL using fixed function pipeline. In this post&#xA;we will try to recreate the same scene but using more modern aproach using&#xA;shaders. Here we will &amp;ldquo;bake&amp;rdquo; shaders inside our source code.&lt;/p&gt;&#xA;&lt;p&gt;Here is the final code of 07_window_opengl_core_profile.c:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &amp;lt;X11/Xlib.h&amp;gt;&#xA;#include &amp;lt;unistd.h&amp;gt;&#xA;#include &amp;lt;stdlib.h&amp;gt;&#xA;&#xA;#define GL_GLEXT_PROTOTYPES&#xA;#include &amp;lt;GL/glx.h&amp;gt;&#xA;#include &amp;lt;GL/glext.h&amp;gt;&#xA;&#xA;static int DoubleBufferAttributes[] = {&#xA;    GLX_RGBA,&#xA;    GLX_RED_SIZE, 1,&#xA;    GLX_GREEN_SIZE, 1,&#xA;    GLX_BLUE_SIZE, 1,&#xA;    GLX_DEPTH_SIZE, 12,&#xA;    GLX_DOUBLEBUFFER,&#xA;    None,&#xA;};&#xA;&#xA;void VerifyOrDie(int ResultStatus, const char *Message) {&#xA;    if(ResultStatus == 0) {&#xA;        fprintf(stderr, &amp;#34;%s&amp;#34;, Message);&#xA;        exit(2);&#xA;    }&#xA;}&#xA;&#xA;void CheckShaderCompilation(unsigned int Shader) {&#xA;    int ResultStatus;&#xA;    char Buffer[512];&#xA;    glGetShaderiv(Shader, GL_COMPILE_STATUS, &amp;amp;ResultStatus);&#xA;&#xA;    if(ResultStatus == 0) {&#xA;        glGetShaderInfoLog(Shader, sizeof(Buffer), NULL, Buffer);&#xA;        printf(&amp;#34;ERROR: Shader compilation failed. -----------------------------------\n&amp;#34;);&#xA;        printf(&amp;#34;%s\n&amp;#34;, Buffer);&#xA;    }&#xA;}&#xA;&#xA;void CheckProgramCompilation(unsigned int Program) {&#xA;    int  ResultStatus;&#xA;    char Buffer[512];&#xA;    glGetProgramiv(Program, GL_COMPILE_STATUS, &amp;amp;ResultStatus);&#xA;&#xA;    if(ResultStatus == 0)&#xA;    {&#xA;        glGetShaderInfoLog(Program, sizeof(Buffer), NULL, Buffer);&#xA;        printf(&amp;#34;ERROR: Failed compiling program\n&amp;#34;);&#xA;        printf(&amp;#34;%s\n&amp;#34;, Buffer);&#xA;    }&#xA;}&#xA;&#xA;&#xA;int main()&#xA;{&#xA;    Display* MainDisplay = XOpenDisplay(0);&#xA;    int MainScreen = XDefaultScreen(MainDisplay);&#xA;    Window RootWindow = XDefaultRootWindow(MainDisplay);&#xA;&#xA;    int Dummy;&#xA;    int ResultStatus = glXQueryExtension(MainDisplay, &amp;amp;Dummy, &amp;amp;Dummy);&#xA;    VerifyOrDie(ResultStatus != 0, &amp;#34;Error: X Server has not GLX extension\n&amp;#34;);&#xA;&#xA;    XVisualInfo* VisualInfo = glXChooseVisual(MainDisplay, MainScreen, DoubleBufferAttributes);&#xA;    VerifyOrDie(VisualInfo != 0, &amp;#34;glXChooseVisual returned 0&amp;#34;);&#xA;    VerifyOrDie(VisualInfo-&amp;gt;class == TrueColor, &amp;#34;No True Color support. Cannot run program without it&amp;#34;);&#xA;&#xA;    GLXContext ShareList = None;&#xA;    int IsDirectRendering = True;&#xA;    GLXContext OpenGLContext = glXCreateContext(MainDisplay, VisualInfo, ShareList, IsDirectRendering);&#xA;    VerifyOrDie(OpenGLContext != 0, &amp;#34;ERROR: Couldn&amp;#39;t create rendering context\n&amp;#34;);&#xA;&#xA;    int WindowX = 0;&#xA;    int WindowY = 0;&#xA;    int WindowWidth = 800;&#xA;    int WindowHeight = 600;&#xA;    int BorderWidth = 0;&#xA;    int WindowClass = InputOutput;&#xA;    int WindowDepth = VisualInfo-&amp;gt;depth;&#xA;    Visual* WindowVisual = VisualInfo-&amp;gt;visual;&#xA;&#xA;    int AttributeValueMask = CWBackPixel | CWEventMask | CWColormap;&#xA;&#xA;    XSetWindowAttributes WindowAttributes = {};&#xA;    WindowAttributes.colormap = XCreateColormap(MainDisplay, RootWindow, VisualInfo-&amp;gt;visual, AllocNone);&#xA;    WindowAttributes.background_pixel = 0xffafe9af;&#xA;    WindowAttributes.event_mask = StructureNotifyMask | KeyPressMask | KeyReleaseMask | PointerMotionMask;&#xA;&#xA;    Window MainWindow = XCreateWindow(MainDisplay, RootWindow, &#xA;            WindowX, WindowY, WindowWidth, WindowHeight,&#xA;            BorderWidth, WindowDepth, WindowClass, WindowVisual,&#xA;            AttributeValueMask, &amp;amp;WindowAttributes);&#xA;&#xA;    XStoreName(MainDisplay, MainWindow, &amp;#34;General app&amp;#34;);&#xA;&#xA;    glXMakeCurrent(MainDisplay, MainWindow, OpenGLContext);&#xA;&#xA;    XMapWindow(MainDisplay, MainWindow);&#xA;&#xA;    Atom WM_DELETE_WINDOW = XInternAtom(MainDisplay, &amp;#34;WM_DELETE_WINDOW&amp;#34;, False);&#xA;    if(!XSetWMProtocols(MainDisplay, MainWindow, &amp;amp;WM_DELETE_WINDOW, 1)) {&#xA;        printf(&amp;#34;Couldn&amp;#39;t register WM_DELETE_WINDOW\n&amp;#34;);&#xA;    }&#xA;&#xA;&#xA;    /* ------------------------------------------------------------------------------------------------------------ */&#xA;    /* ---------- OPENGL ------------------------------------------------------------------------------------------ */&#xA;    /* ------------------------------------------------------------------------------------------------------------ */&#xA;&#xA;    float S = 0.5;&#xA;    float Vertices[] = {&#xA;          -S, -S, 0.0f,     1.0f, 0.0f, 0.0f,&#xA;        0.0f,  S, 0.0f,     0.0f, 1.0f, 0.0f,&#xA;           S, -S, 0.0f,     0.0f, 0.0f, 1.0f,&#xA;    };&#xA;&#xA;    unsigned int VBO;&#xA;    glGenBuffers(1, &amp;amp;VBO);&#xA;    glBindBuffer(GL_ARRAY_BUFFER, VBO);&#xA;    glBufferData(GL_ARRAY_BUFFER, sizeof(Vertices), Vertices, GL_STATIC_DRAW);&#xA;&#xA;    const char* VertexShaderSource = &#xA;        &amp;#34;#version 330 core\n&amp;#34;&#xA;        &amp;#34;layout (location = 0) in vec3 Pos;&amp;#34;&#xA;        &amp;#34;layout (location = 1) in vec3 InColor;&amp;#34;&#xA;        &amp;#34;out vec3 Color;&amp;#34;&#xA;        &amp;#34;&amp;#34;&#xA;        &amp;#34;void main()&amp;#34;&#xA;        &amp;#34;{&amp;#34;&#xA;        &amp;#34;   gl_Position = vec4(Pos.x, Pos.y, 0.0f, 1.0f);&amp;#34;&#xA;        &amp;#34;   Color = InColor;&amp;#34;&#xA;        &amp;#34;}\0&amp;#34;;&#xA;    unsigned int VertexShader = glCreateShader(GL_VERTEX_SHADER);&#xA;    glShaderSource(VertexShader, 1, &amp;amp;VertexShaderSource, NULL);&#xA;    glCompileShader(VertexShader);&#xA;    CheckShaderCompilation(VertexShader);&#xA;&#xA;    const char* FragmentShaderSource = &#xA;        &amp;#34;#version 330 core\n&amp;#34;&#xA;        &amp;#34;out vec4 FragColor;&amp;#34;&#xA;        &amp;#34;in vec3 Color;&amp;#34;&#xA;        &amp;#34;void main()&amp;#34;&#xA;        &amp;#34;{&amp;#34;&#xA;        /* &amp;#34;   FragColor = vec4(1.0f, 0.5f, 0.5f, 1.0f);&amp;#34; */&#xA;        &amp;#34;   FragColor = vec4(Color, 1.0f);&amp;#34;&#xA;        &amp;#34;}\0&amp;#34;;&#xA;    unsigned int FragmentShader = glCreateShader(GL_FRAGMENT_SHADER);&#xA;    glShaderSource(FragmentShader, 1, &amp;amp;FragmentShaderSource, NULL);&#xA;    glCompileShader(FragmentShader);&#xA;    CheckShaderCompilation(FragmentShader);&#xA;&#xA;    unsigned int ShaderProgram = glCreateProgram();&#xA;    glAttachShader(ShaderProgram, VertexShader);&#xA;    glAttachShader(ShaderProgram, FragmentShader);&#xA;    glLinkProgram(ShaderProgram);&#xA;&#xA;    CheckProgramCompilation(ShaderProgram);&#xA;&#xA;    glDeleteShader(VertexShader);&#xA;    glDeleteShader(FragmentShader);&#xA;&#xA;    glUseProgram(ShaderProgram);&#xA;&#xA;    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6*sizeof(float), (void*)0);&#xA;    glEnableVertexAttribArray(0);&#xA;&#xA;    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6*sizeof(float), (void *)(3*sizeof(float)));&#xA;    glEnableVertexAttribArray(1);&#xA;&#xA;&#xA;    /* ------------------------------------------------------------------------------------------------------------ */&#xA;    /* ------------------------------------------------------------------------------------------------------------ */&#xA;    /* ------------------------------------------------------------------------------------------------------------ */&#xA;&#xA;    int IsProgramRunning = 1;&#xA;    while(IsProgramRunning) {&#xA;&#xA;        while(XPending(MainDisplay)) {&#xA;            XEvent GeneralEvent = {};&#xA;            XNextEvent(MainDisplay, &amp;amp;GeneralEvent);&#xA;            switch(GeneralEvent.type) {&#xA;                case ClientMessage: &#xA;                {&#xA;                    IsProgramRunning = 0;&#xA;                } break;&#xA;            }&#xA;        }&#xA;&#xA;        {&#xA;            glClearColor(0.0, 0.0, 0.2, 1.0);&#xA;            glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );&#xA;&#xA;            glDrawArrays(GL_TRIANGLES, 0, 3);&#xA;&#xA;            glXSwapBuffers(MainDisplay, MainWindow);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Compile it with &lt;code&gt;gcc 07_window_opengl_core_profile.c -o 07_window_opengl_core_profile -lX11 -lGL&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xlib 03: Opengl fixed function from scratch window in Xlib</title>
      <link>https://hereket.com/posts/x11_opengl_window_fixed_function/</link>
      <pubDate>Mon, 25 Mar 2024 22:18:19 +0500</pubDate>
      <guid>https://hereket.com/posts/x11_opengl_window_fixed_function/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;We will continue exploring creating windows from scratch in linux using Xlib.&#xA;Here we will look into opening basic window and draw onto it using opengl using&#xA;fixed function pipeline. You can look into &lt;a href=&#34;https://hereket.com/posts/x11_software_rendering_window&#34;&gt;previous post&lt;/a&gt;&#xA;if you want to compare this approach with software rendering.&lt;/p&gt;&#xA;&lt;p&gt;I wanted to start with fixed-function because it is a lot easier and can help&#xA;understand basics of opengl setup. Once you know how to start with basic opengl&#xA;then moving to shaders will be a bit easier than trying to grasp all at the same&#xA;time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xlib 02: Software rendering window in X11</title>
      <link>https://hereket.com/posts/x11_software_rendering_window/</link>
      <pubDate>Sat, 23 Mar 2024 22:18:19 +0500</pubDate>
      <guid>https://hereket.com/posts/x11_software_rendering_window/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;This is continuation of the &lt;a href=&#34;https://hereket.com/posts/linux_creating_x11_windows&#34;&gt;previous post&lt;/a&gt; about creating windows using Xlib/X11.&#xA;In this post I will show how to start basic software rendering inside linux from&#xA;scratch usin Xlib.&lt;/p&gt;&#xA;&lt;h2 id=&#34;full-code&#34;&gt;Full Code&lt;/h2&gt;&#xA;&lt;p&gt;05_window_software_renderer.c&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;X11/Xlib.h&amp;gt;&#xA;#include &amp;lt;X11/Xutil.h&amp;gt;&#xA;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &amp;lt;stdint.h&amp;gt;&#xA;#include &amp;lt;stdlib.h&amp;gt;&#xA;&#xA;#define STATUS_ERROR 0&#xA;&#xA;typedef struct {&#xA;    int X;&#xA;    int Y;&#xA;    int Width;&#xA;    int Height;&#xA;} entity;&#xA;&#xA;typedef struct {&#xA;    uint8_t *Memory;&#xA;    uint64_t Size;&#xA;    uint32_t Width;&#xA;    uint32_t Height;&#xA;    uint32_t Pitch;&#xA;} buffer ;&#xA;&#xA;&#xA;float &#xA;Clamp(float Min, float Value, float Max) {&#xA;    if(Value &amp;lt; Min)      { Value = Min; }&#xA;    else if(Value &amp;gt; Max) { Value = Max; }&#xA;    return Value; &#xA;}&#xA;&#xA;void DrawRect(buffer *Buffer, int32_t X, int32_t Y, int32_t Width, int32_t Height, uint32_t Color) {&#xA;    int32_t StartX = X;&#xA;    int32_t EndX = X + Width;&#xA;    int32_t StartY = Y;&#xA;    int32_t EndY = Y + Height;&#xA;&#xA;    StartX = Clamp(0, StartX, Buffer-&amp;gt;Width);&#xA;    EndX   = Clamp(0, EndX  , Buffer-&amp;gt;Width);&#xA;&#xA;    StartY = Clamp(0, StartY, Buffer-&amp;gt;Height);&#xA;    EndY   = Clamp(0, EndY  , Buffer-&amp;gt;Height);&#xA;&#xA;    for(int Y = StartY; Y &amp;lt; EndY; Y++) {&#xA;        for(int X = StartX; X &amp;lt; EndX; X++) {&#xA;            uint32_t *Pixel = (uint32_t *)((uint32_t *)Buffer-&amp;gt;Memory + Y*Buffer-&amp;gt;Width + X);&#xA;            *Pixel = Color;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;&#xA;&#xA;void DoRender(buffer* Buffer, entity Box)&#xA;{&#xA;    DrawRect(Buffer, 0, 0, Buffer-&amp;gt;Width, Buffer-&amp;gt;Height, 0xff87de87);&#xA;    /* DrawRect(Buffer, 10, 10, 50, 80, 0xff00aa44); */&#xA;    DrawRect(Buffer, Box.X, Box.Y, Box.Width, Box.Height, 0xff00aa44);&#xA;}&#xA;&#xA;int main()&#xA;{&#xA;    Display* MainDisplay = XOpenDisplay(0);&#xA;    Window RootWindow = XDefaultRootWindow(MainDisplay);&#xA;&#xA;    int DefaultScreen = DefaultScreen(MainDisplay);&#xA;    GC Context = XDefaultGC(MainDisplay, DefaultScreen);&#xA;&#xA;    int ScreenDepth = 24;&#xA;    XVisualInfo VisualInfo = {};&#xA;    if(STATUS_ERROR == XMatchVisualInfo(MainDisplay, DefaultScreen, ScreenDepth, TrueColor, &amp;amp;VisualInfo)) {&#xA;        printf(&amp;#34;ERROR: No matching visual info\n&amp;#34;);&#xA;    }&#xA;    &#xA;    int WindowX = 0;&#xA;    int WindowY = 0;&#xA;    int WindowWidth = 800;&#xA;    int WindowHeight = 600;&#xA;    int BorderWidth = 0;&#xA;    int WindowDepth = VisualInfo.depth;&#xA;    int WindowClass = InputOutput;&#xA;    Visual* WindowVisual = VisualInfo.visual;&#xA;&#xA;    int AttributeValueMask = CWBackPixel | CWEventMask;&#xA;    XSetWindowAttributes WindowAttributes = {};&#xA;    WindowAttributes.background_pixel = 0xffffccaa;&#xA;    WindowAttributes.event_mask = StructureNotifyMask | KeyPressMask | KeyReleaseMask | ExposureMask;&#xA;&#xA;    Window MainWindow = XCreateWindow(MainDisplay, RootWindow, &#xA;            WindowX, WindowY, WindowWidth, WindowHeight,&#xA;            BorderWidth, WindowDepth, WindowClass, WindowVisual,&#xA;            AttributeValueMask, &amp;amp;WindowAttributes);&#xA;&#xA;    XMapWindow(MainDisplay, MainWindow);&#xA;&#xA;    XStoreName(MainDisplay, MainWindow, &amp;#34;Moving rectangle. Use arrow keys to move.&amp;#34;);&#xA;&#xA;    Atom WM_DELETE_WINDOW = XInternAtom(MainDisplay, &amp;#34;WM_DELETE_WINDOW&amp;#34;, False);&#xA;    if(!XSetWMProtocols(MainDisplay, MainWindow, &amp;amp;WM_DELETE_WINDOW, 1)) {&#xA;        printf(&amp;#34;Couldn&amp;#39;t register WM_DELETE_WINDOW property \n&amp;#34;);&#xA;    }&#xA;&#xA;&#xA;    int BitsPerPixel = 32;&#xA;    int BytesPerPixel = BitsPerPixel / 8;&#xA;    int WindowBufferSize = WindowWidth*WindowHeight*BytesPerPixel;&#xA;&#xA;    buffer Buffer = {}; &#xA;    Buffer.Width = WindowWidth;&#xA;    Buffer.Height = WindowHeight;&#xA;    Buffer.Pitch = Buffer.Width * BytesPerPixel;&#xA;    Buffer.Size = Buffer.Pitch * Buffer.Height;&#xA;    Buffer.Size = Buffer.Pitch * Buffer.Height;&#xA;    Buffer.Memory = (uint8_t *)malloc(Buffer.Size); &#xA;&#xA;    entity Box = {};&#xA;    Box.Width = 50;&#xA;    Box.Height = 80;&#xA;    Box.X = WindowWidth/2 - Box.Width/2;&#xA;    Box.Y = WindowHeight/2 - Box.Height/2;&#xA;    int StepSize = 5;&#xA;&#xA;    int Offset = 0;&#xA;    int BytesBetweenScanlines = 0;&#xA;    XImage *WindowBuffer = XCreateImage(MainDisplay, VisualInfo.visual, VisualInfo.depth, ZPixmap, &#xA;            Offset, (char *)Buffer.Memory, WindowWidth, WindowHeight, BitsPerPixel, BytesBetweenScanlines);&#xA;&#xA;    int IsWindowOpen = 1;&#xA;    while(IsWindowOpen) {&#xA;&#xA;        while(XPending(MainDisplay) &amp;gt; 0) {&#xA;            XEvent GeneralEvent = {};&#xA;&#xA;            XNextEvent(MainDisplay, &amp;amp;GeneralEvent);&#xA;&#xA;            switch(GeneralEvent.type) {&#xA;                case KeyPress:&#xA;                case KeyRelease:&#xA;                {&#xA;                    XKeyPressedEvent *Event = (XKeyPressedEvent *)&amp;amp;GeneralEvent;&#xA;                    if(Event-&amp;gt;keycode == XKeysymToKeycode(MainDisplay, XK_Escape))&#xA;                    {&#xA;                        IsWindowOpen = 0;&#xA;                    }&#xA;&#xA;                    if(Event-&amp;gt;keycode == XKeysymToKeycode(MainDisplay, XK_Down))&#xA;                    {&#xA;                        Box.Y += StepSize;&#xA;                    }&#xA;                    else if(Event-&amp;gt;keycode == XKeysymToKeycode(MainDisplay, XK_Up))&#xA;                    {&#xA;                        Box.Y -= StepSize;&#xA;                    }&#xA;                    else if(Event-&amp;gt;keycode == XKeysymToKeycode(MainDisplay, XK_Right))&#xA;                    {&#xA;                        Box.X += StepSize;&#xA;                    }&#xA;                    else if(Event-&amp;gt;keycode == XKeysymToKeycode(MainDisplay, XK_Left))&#xA;                    {&#xA;                        Box.X -= StepSize;&#xA;                    }&#xA;&#xA;                } break;&#xA;&#xA;                case ClientMessage:&#xA;                {&#xA;                    XClientMessageEvent *Event = (XClientMessageEvent *) &amp;amp;GeneralEvent;&#xA;                    if((Atom)Event-&amp;gt;data.l[0] == WM_DELETE_WINDOW) {&#xA;                        XDestroyWindow(MainDisplay, MainWindow);&#xA;                        IsWindowOpen = 0;&#xA;                    }&#xA;                } break;&#xA;&#xA;                case ConfigureNotify:&#xA;                {&#xA;                    XConfigureEvent *Event = (XConfigureEvent *)&amp;amp;GeneralEvent;&#xA;                    WindowWidth = Event-&amp;gt;width;&#xA;                    WindowHeight = Event-&amp;gt;height;&#xA;&#xA;                    // NOTE: XDestroyImage also frees Memory, so no need to free from our side&#xA;                    XDestroyImage(WindowBuffer);&#xA;&#xA;                    Buffer.Width = WindowWidth;&#xA;                    Buffer.Height = WindowHeight;&#xA;                    Buffer.Pitch = Buffer.Width * BytesPerPixel;&#xA;                    Buffer.Size = Buffer.Pitch * Buffer.Height;&#xA;                    Buffer.Memory = (uint8_t *)malloc(Buffer.Size); &#xA;&#xA;                    WindowBuffer = XCreateImage(MainDisplay, VisualInfo.visual, VisualInfo.depth, ZPixmap, &#xA;                            Offset, (char *)Buffer.Memory, WindowWidth, WindowHeight, BitsPerPixel, BytesBetweenScanlines);&#xA;                } break;&#xA;&#xA;            }&#xA;        }&#xA;&#xA;        DoRender(&amp;amp;Buffer, Box);&#xA;&#xA;        int SourceX = 0;&#xA;        int SourceY = 0;&#xA;        int DestX = 0;&#xA;        int DestY = 0;&#xA;        XPutImage(MainDisplay, MainWindow, Context, WindowBuffer, SourceX, SourceY, DestX, DestY, WindowWidth, WindowHeight);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Compile code with: &lt;code&gt;gcc 05_window_software_renderer.c -o 05_window_software_renderer -lX11&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xlib 01: Creating windows from scratch with Xlib on Linux</title>
      <link>https://hereket.com/posts/linux_creating_x11_windows/</link>
      <pubDate>Wed, 20 Mar 2024 22:18:19 +0500</pubDate>
      <guid>https://hereket.com/posts/linux_creating_x11_windows/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In this post I wanted to go over creating windows using raw &lt;strong&gt;Xlib (X11)&lt;/strong&gt; and show&#xA;how to approach the task if you want to do it from scratch. Current trend is to&#xA;use Wayland and a lot of distros already switched to using it but still there&#xA;are a very large portion of computers that are using &lt;strong&gt;X11&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;When I first was learning how to open working with &lt;strong&gt;X11&lt;/strong&gt; it was very problematic&#xA;to find any tutorial that clearly showed basics and allowed me to start playing&#xA;around quickly. Reading documentation is possible but takes a lot of time and&#xA;effort. Other tutorials looked like introduced too much moving parts and was a&#xA;bit complex for fresh and uninformed mind.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How flutter uses certificate authorities</title>
      <link>https://hereket.com/posts/flutter-ca-certificates/</link>
      <pubDate>Wed, 20 Dec 2023 14:01:14 +0500</pubDate>
      <guid>https://hereket.com/posts/flutter-ca-certificates/</guid>
      <description>&lt;p&gt;Few month ago I wrote an article explaining which CAs flutter compiles&#xA;inside the app but recently I was trying to explore how it loads those&#xA;certificaes from memory and found out that my assumption about compiled-in root&#xA;certificates was probably wrong.&lt;/p&gt;&#xA;&lt;p&gt;I did a quick skim through dart source code and it looked to me that it was not&#xA;compiling in CAs into the final app. So I decided a quick test on android to see&#xA;if the app even tries to look into system list of Certificate Authorities.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programmatically populating django with random and real data</title>
      <link>https://hereket.com/posts/django-populate-with-random-data/</link>
      <pubDate>Tue, 12 Dec 2023 05:59:52 +0500</pubDate>
      <guid>https://hereket.com/posts/django-populate-with-random-data/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;One of the best features of Django is the speed it provides to develop fast&#xA;prototypes. It does not mean that it is a framework to develop prototypes but it&#xA;is very helpful for building quick and fast prototypes when you need one. It is&#xA;my first when I need to build a proof of concept for something or when I want&#xA;quickly prepare something for a presentation. Yet one feature that I was always&#xA;missing is the ability to quickly populate datatabase with some random (or real)&#xA;data just to see how it all fits together while you are just shaping your ideas.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using ligatures as icons on a website</title>
      <link>https://hereket.com/posts/iconified_ligatures/</link>
      <pubDate>Wed, 06 Sep 2023 16:22:30 +0500</pubDate>
      <guid>https://hereket.com/posts/iconified_ligatures/</guid>
      <description>&lt;p&gt;You can look at font icons here: &lt;a href=&#34;https://hereket.com/tiny/ligatures&#34;&gt;Font icon ligatures&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;&#xA;&lt;p&gt;There are two reasons why I got interested in reasearching about this topic.&#xA;First of a lot of google products loads garbage when you are not using super&#xA;fast internet speeds. The main most noticeble one used to gmail but it looks&#xA;like they fixed it now.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://hereket.com/posts/google-icons/image/analytics-icons-font-not-loaded.png&#34; alt=&#34;Analytics icons font not loaded&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;But even though it was annoying it didn&amp;rsquo;t spark enough enterest to go and dig&#xA;deeper to understand reasons behind it. The main reason was me misclicking on an&#xA;icon and selecting just a portion of it. It looked like this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monitoring Raw X11 Communication or why Chromium opens 7 Xorg connections</title>
      <link>https://hereket.com/posts/monitoring-raw-x11-communication/</link>
      <pubDate>Fri, 11 Aug 2023 03:45:55 +0500</pubDate>
      <guid>https://hereket.com/posts/monitoring-raw-x11-communication/</guid>
      <description>&lt;p&gt;This is partly a continuation of previous article on this topic:&#xA;&lt;a href=&#34;https://hereket.com/posts/exploring-xorg-connections/&#34;&gt;Exploring Xorg connections&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;While exploring Xorg and its connections I stumbled upong interesting fact that&#xA;some apps open multiple connections to Xorg even though they have just one&#xA;window. For example chromium had 7, skype 8, firefox and telegram had each 2&#xA;connections. Since Skype connection count was suspisiously close to chromeium&#xA;I immediately assumed that it is all because of &lt;strong&gt;Electron&lt;/strong&gt; since it is based&#xA;on chromium. Once I opened vscode and indeed it had 8 connections which leads to&#xA;assumption that all chromium based (electron) applications open 7+ Xorg&#xA;connections.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploring Xorg connections</title>
      <link>https://hereket.com/posts/exploring-xorg-connections/</link>
      <pubDate>Mon, 07 Aug 2023 03:04:42 +0500</pubDate>
      <guid>https://hereket.com/posts/exploring-xorg-connections/</guid>
      <description>&lt;p&gt;There is part two: &lt;a href=&#34;https://hereket.com/posts/monitoring-raw-x11-communication/&#34;&gt;Monitoring Raw X11 Communication or why Chromium opens 7 Xorg connections&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Lately I have been playing around with raw X11 protocol by writing apps that&#xA;work directly with Xorg by establishing a unix socket connection with it. It was&#xA;pretty fun to play with and feels like easier than Xlib (but maybe I just got&#xA;better). While doing all that I got interested with how other programs interact&#xA;with Xorg and decided to explore how other programs do it and look at programs&#xA;taht don&amp;rsquo;t have &amp;lsquo;perceptible&amp;rsquo; windows but still maintain connections. Bellow is&#xA;just my notes about that.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter Embedded Certificate Authorities</title>
      <link>https://hereket.com/posts/flutter-embedded-ca/</link>
      <pubDate>Wed, 02 Aug 2023 14:01:14 +0500</pubDate>
      <guid>https://hereket.com/posts/flutter-embedded-ca/</guid>
      <description>&lt;p&gt;&lt;strong&gt;IMPORTANT: This note is wrong about flutter always using embedded CA certificates for&#xA;validation. There is a new corrected note about how it works:&lt;/strong&gt;&#xA;&lt;a href=&#34;https://hereket.com/posts/flutter-ca-certificates/&#34;&gt;How flutter uses certificate authorities&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Flutter apps in contrast to general approch embeds CAs&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Certificate_authority&#34;&gt;(Certificate Authority)&lt;/a&gt;&#xA;right into the app and do not rely on operating system to verify the validity of&#xA;an SSL certificate. At first I thought that this was &amp;ldquo;feature&amp;rdquo; of the flutter&#xA;framework when I first encountered some issues with it but upon investigation I&#xA;found that this part of dart language implementation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flutter vs Vanilla javascript</title>
      <link>https://hereket.com/posts/flutter-vs-vanilla-js/</link>
      <pubDate>Tue, 01 Aug 2023 02:37:38 +0500</pubDate>
      <guid>https://hereket.com/posts/flutter-vs-vanilla-js/</guid>
      <description>&lt;p&gt;&lt;strong&gt;tldr:&lt;/strong&gt; Compare flutter with js for web dev.&lt;/p&gt;&#xA;&lt;p&gt;You can play with:&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://hereket.com/tiny/dna-color-app/&#34;&gt;vanilla js&lt;/a&gt;&lt;/strong&gt; or&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://hereket.com/other/dna-color-app-flutter-canvaskit/&#34;&gt;flutter web (canvaskit)&lt;/a&gt;&lt;/strong&gt;  or&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://hereket.com/other/dna-app-flutter-html-renderer/&#34;&gt;flutter web (html renderer)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;If you are on mobile and whant to see how they look go to &lt;strong&gt;&lt;a href=&#34;#video&#34;&gt;Video section&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: When used with flutter html renderer this app became about 2 Mb&#xA;in size and just over 500 Kb compressed. Go the apps above look around.&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Flutter is framework to develop apps for android and ios. It is also a pretty&#xA;good one. I have been developing apps using flutter for quite some time and it&#xA;really helped me to work faster (compared to native development that I used to&#xA;do) and my clients save money. For 99% of the projects that I see I recommend&#xA;flutter without hesitation as most works required by people that approach could&#xA;be easily and efficiently done in flutter.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vim tiny IDE: edit-compile-edit cycle for fast error browsing</title>
      <link>https://hereket.com/posts/vim_ide_compile_cycle/</link>
      <pubDate>Mon, 24 Jul 2023 15:25:51 +0500</pubDate>
      <guid>https://hereket.com/posts/vim_ide_compile_cycle/</guid>
      <description>&lt;p&gt;This is continuation of previous post:&#xA;&lt;strong&gt;&lt;a href=&#34;https://hereket.com/posts/vim_tmux_ide/&#34;&gt;VIM and Tmux as a tiny quasi IDE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;&#xA;&lt;p&gt;Here in this post I will show you how I use a bit of scripting together with&#xA;vim&amp;rsquo;s quickfix window to speed up my workflow of finding compilation errors.&#xA;There reason to use bash instead of makefiles is because it is easier for me to&#xA;reason what is happening in bash script than in makefile and it is just easier&#xA;to debug when compared to makefiles.&lt;/p&gt;</description>
    </item>
    <item>
      <title>VIM and Tmux as a tiny quasi IDE</title>
      <link>https://hereket.com/posts/vim_tmux_ide/</link>
      <pubDate>Sat, 22 Jul 2023 17:22:46 +0500</pubDate>
      <guid>https://hereket.com/posts/vim_tmux_ide/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;#video&#34;&gt;watch video&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;There are multiple approaches to development and everyone has a some style of&#xA;how they like to approach this process. Every task requires could require&#xA;totally different approach and different IDE. So if I do native Android or Flutter&#xA;developemnt  it is natural for me to Android Stuio, for Java code it is&#xA;Intellij, for Qt it is more comforatable if Qt Creator is used.&lt;/p&gt;&#xA;&lt;p&gt;Here I use pharase &lt;strong&gt;&amp;ldquo;quasi IDE&amp;rdquo;&lt;/strong&gt; to separate from trandional understanding of&#xA;an IDE. Usually IDE is something that can autocomplete, do debugging, version&#xA;controll and billion other things. The only requirement for our &amp;ldquo;tiny IDE&amp;rdquo; is to&#xA;efficiently write code, then run it, see results and do all this seamlessly.&#xA;(Although you could easily add autocomplete with vim plugins). I use this setup&#xA;without any plugins and you can spice it more if you need.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Easy todo and notes management with VIM, dmenu and bash</title>
      <link>https://hereket.com/posts/todo_note_management/</link>
      <pubDate>Sat, 22 Jul 2023 02:24:15 +0500</pubDate>
      <guid>https://hereket.com/posts/todo_note_management/</guid>
      <description>&lt;p&gt;I have been taking notes and managing my todo lists for quite some time. During&#xA;this time I have used different tools for both. For note taking I tried evernote,&#xA;google docs, obsidian, OneNote, regular files and quite a few others. The same&#xA;goes for todo lists. I probably used everything from top 20 list for apps for&#xA;todo management (even taskwarrior). But in the end I ended up using just &lt;strong&gt;neovim&lt;/strong&gt;,&#xA;&lt;strong&gt;dmenu&lt;/strong&gt; and a little bit of &lt;strong&gt;shell magic&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Instant code reload in Android</title>
      <link>https://hereket.com/posts/instant_code_reload/</link>
      <pubDate>Fri, 21 Jul 2023 02:00:19 +0500</pubDate>
      <guid>https://hereket.com/posts/instant_code_reload/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Here I am presenting one possible way to do &lt;strong&gt;&amp;ldquo;on the fly code reloading&amp;rdquo;&lt;/strong&gt; of&#xA;JNI code. The whole code is C/C++ compiled in 2 shared libraries and realoded on&#xA;demand without restaring the application.&lt;/p&gt;&#xA;&lt;p&gt;This example uses a game tiny &amp;ldquo;game&amp;rdquo; where you just walk around space. This is&#xA;just a placeholder idea borrowed from Casey Muratori&amp;rsquo;s Handmade Hero youtube&#xA;series.&lt;/p&gt;&#xA;&lt;p&gt;The build process used in this project is described in: &lt;strong&gt;&lt;a href=&#34;https://hereket.com/posts/android_from_command_line/&#34;&gt;Build android apk from command line without gradle &lt;/a&gt;&lt;/strong&gt;&#xA;post.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build android apk from command line without gradle</title>
      <link>https://hereket.com/posts/android_from_command_line/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://hereket.com/posts/android_from_command_line/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;This is post is similar to the one about building flutter but a bit different.&#xA;Actually this one was written a few years prior to writing flutter version but&#xA;just never got published. Since then some steps has changed and I moved to Java 11.&#xA;But you if you still build with java 8 old build method is still surprisingly&#xA;functional.&lt;/p&gt;&#xA;&lt;p&gt;So the idea is to build and APK file which then can be installed on an android&#xA;phone without using gradle and doing each step &amp;ldquo;manually&amp;rdquo;. If you are building&#xA;regular android apps with Java/Kotlin then this is pointless. But it has a bit&#xA;more sense when you are building game like apps with C/C++. But the most&#xA;important thing is just to learn how this build process is working, what are its&#xA;parts and how they stack together.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building flutter android app without gradle</title>
      <link>https://hereket.com/posts/flutter_without_gradle/</link>
      <pubDate>Thu, 13 Jul 2023 12:01:36 +0500</pubDate>
      <guid>https://hereket.com/posts/flutter_without_gradle/</guid>
      <description>&lt;p&gt;Initial draft&lt;/p&gt;&#xA;&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;&#xA;&lt;p&gt;Flutter is a very useful framework which does quite a lot of heavy lifting and&#xA;hides all the dirty details inside a black box. It is very good when you want&#xA;get the job done but I really like opening black boxes as I really don&amp;rsquo;t like&#xA;magic.&lt;/p&gt;&#xA;&lt;p&gt;The sole reasoning behind this project is to build a &amp;lsquo;hello world&amp;rsquo; project with&#xA;as few steps as possible and in the end build an apk file which could be&#xA;installed on an android phone. This will be a good starting point for other&#xA;people to start investigating the build process, involved files and required&#xA;tools. I will be using &lt;strong&gt;linux&lt;/strong&gt; (archlinux) and build only an &lt;strong&gt;apk&lt;/strong&gt; and won&amp;rsquo;t&#xA;cover anything related to build steps on and for other platforms. Also current&#xA;plan is to do only &lt;strong&gt;debug&lt;/strong&gt; build and ignore release build but I might add&#xA;release version later.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web analalytics effect on a mobile page</title>
      <link>https://hereket.com/posts/web_analytics_effects/</link>
      <pubDate>Thu, 06 Jul 2023 20:48:32 +0500</pubDate>
      <guid>https://hereket.com/posts/web_analytics_effects/</guid>
      <description>&lt;h3 id=&#34;what-happened&#34;&gt;What happened?&lt;/h3&gt;&#xA;&lt;p&gt;So I create this site to test some ideas this time I chose to use a &amp;lsquo;static&#xA;site&amp;rsquo; approach. There is no specific reason why I chose it to be this way it is&#xA;just I wanted to try something that I have not tried before. My last test was&#xA;with django.&lt;/p&gt;&#xA;&lt;p&gt;So one of my first experiments I wanted to do is to stack different web&#xA;analytics tool on the page and see how they behave and report data for later&#xA;comparison. For my first test I wanted to have 3 different web analytics&#xA;services Google analytics, Yandex metrica and Matomo. I created tags for google&#xA;and yandex and wanted to add Matomo a bit later just out of laziness.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
